<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0070)http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Functional Scala: Functions « brain driven development</title>
<link rel="pingback" href="http://gleichmann.wordpress.com/xmlrpc.php">
<style type="text/css" media="screen"></style>
<link rel="alternate" type="application/rss+xml" title="brain driven development » Feed" href="http://gleichmann.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Comments Feed" href="http://gleichmann.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Functional Scala: Functions Comments Feed" href="http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/feed/">

<link rel="stylesheet" href="./Functional Scala_ Functions_files/global.css" type="text/css">
<link rel="stylesheet" id="sharedaddy-css" href="./Functional Scala_ Functions_files/sharing.css" type="text/css" media="all">



<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gleichmann.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gleichmann.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="brain driven development" href="http://gleichmann.wordpress.com/">
<link rel="prev" title="Functional Scala: Introduction" href="http://gleichmann.wordpress.com/2010/10/28/functional-scala-introduction/">
<link rel="next" title="Functional Scala: Functions as Objects as Functions" href="http://gleichmann.wordpress.com/2010/11/08/functional-scala-functions-as-objects-as-functions/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="./Functional Scala_ Functions_files/Functional Scala_ Functions.htm">
<link rel="shortlink" href="http://wp.me/p95ru-4R">
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1250548519g">
	<style type="text/css"></style>
	<link rel="openid.server" href="http://gleichmann.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://gleichmann.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://gleichmann.wordpress.com/osd.xml" title="brain driven development">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
<style type="text/css"></style>
<meta name="application-name" content="brain driven development"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="a development driven blog"><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gleichmann.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico">


<link rel="stylesheet" type="text/css" href="./Functional Scala_ Functions_files/shThemeDefault.css"><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Functional Scala_ Functions_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Functional Scala_ Functions_files/services.css"><script type="text/javascript" src="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.js"></script><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.css" type="text/css" media="screen"><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability-print.css" media="print" type="text/css"></head>

<body class="style-newspaper" id="readabilityBody"><div id="readOverlay" class="style-newspaper"><div id="readTools"><a href="http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/#" onclick="return window.location.reload()" title="Reload original page" id="reload-page">Reload Original Page</a><a href="http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/#" onclick="javascript:window.print();" title="Print page" id="print-page">Print Page</a><a href="http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/#" onclick="readability.emailBox(); return false;" title="Email page" id="email-page">Email Page</a></div><div id="readInner" class="margin-x-narrow size-x-small"><h1>Functions « brain driven development</h1><div id="readability-content"><div id="readability-page-1" class="page"><div class=""><p>Welcome back to the second episode of Functional Scala!</p><p>After we’ve checked out some core ideas and extracted <em>Expression based function application as </em>the basic computation method of Functional Programming within the<a href="http://gleichmann.wordpress.com/2010/10/28/functional-scala-introduction/" target="_blank"> last episode</a>, let’s start with what <a href="http://en.wikipedia.org/wiki/Erik_Meijer_%28computer_scientist%29" target="_blank">Dr. Erik Meijer</a>* would call the <em>bread and butter of Functional Programming</em>: and now guess what … it’s surprisingly about … Functions (please imagine a chorus of trumpets in the background while reading this).</p><p>In order to call a Function (it is said to apply a Function to its arguments), you firstly have to define one. So let’s get a feeling about how to define Functions in Scala …<span id="more-301"></span></p><h2>Function Literals</h2><p>Let’s remember the definition of a Function from the last episode:</p><blockquote><p><em>A Function is a mapping that takes one or more arguments and  produces a single result (typically by a function definition that  specify how the result can by calculated solely in terms of its  arguments). </em></p></blockquote><p>So all it needs to define a function is to declare the parameters (and its types, since Scala is a statically typed language) on which the function will operate and give a definition on how the result is calculated, typically in terms of the the given parameters. Within Scala you’re able to define a Function in a literal form, by specifying exactly these both essential parts of a Function – a list of parameters followed by the definition of the functions body:</p><div id="highlighter_813290" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">(&nbsp; x :Int,&nbsp; y :Int&nbsp; )&nbsp; =&gt;&nbsp; x&nbsp; +&nbsp; y</code></td></tr></tbody></table></div></div></div><p>What we have here is a simple function literal, first declaring a list of parameters (both of type Int), followed by the formula for calculating the result – both separated by <em>=&gt;</em> (let’s call it the function arrow) which discriminates the parameters (on the left) from the Function body (on the right). It turns out that this literal form is kind of syntactic sugar for constructing an instance of a special Function type (more on that in a later episode).</p><p>Wow, that was simple. But what if my Function does a slightly more complex calculation that may be somewhat ‘longer’ than the given example above? Well, of course you’re able to define a multiline Function simply by embracing the Funtion body in curly braces:</p><div id="highlighter_647557" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">(&nbsp; a :Int,&nbsp; b :Int,&nbsp; c :Int&nbsp; )&nbsp; =&gt;&nbsp; {</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>6</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">aSquare + bSquare == cSquare</code></td></tr></tbody></table></div></div></div><p>Look at that admittedly somewhat bloated example of a Function, which tests if the three given integer values form a so called <a href="http://en.wikipedia.org/wiki/Pythagorean_triple" target="_blank"><em>Pythagorean Triple</em></a>. Wait wait – you may proclaim: Ok, I see those multiple lines within that example, I see those mentioned curly braces, but what i don’t see is any return statement which states what the function may return to its caller. So let’s explore the body of the Function line by line:</p><p>In Line 2 to 4, we’re calculating some intermediate values in terms of the given parameters. In order to refer to these intermediate values afterwards, we gave them an alias name, using <em>val</em>. Now in line 6 it gets more interesting. What we see is an expression which is formed in terms of the previous calculated intermediate values. In Scala it turns out, that the result of the whole Function always evaluates to the value of the last expression within the Function body. And since our last expression constitutes a (equality) relation that may hold or not, this last expression and hence the result of the Function evaluates to either <em>true </em>or <em>false</em>.</p><h2>Function types</h2><p>Not so fast, mate. We’ve said that Scala is a statically typed language, hence we had to declare the types of a Functions parameters. But what about the type of the Functions result value? And don’t let us stop here – since we’ve also already mentioned that the outcome of a Function literal is an instance of a special Function type – what about the type of the whole function? Well spotted!</p><p>As for the type of a Functions result value, we’ve already gathered enough knowledge to answer that. Its simply the type of the value to which the last expression within the Function body evaluates. Let’s recapitulate and think a wee bit what the type of the whole function may be. There are two essential parts of a Function: The parameter list and the Function body, separated by the function arrow =&gt;. Now, every parameter has its own type and as we just discovered, the Function body is essentialy expressed by its result, which also has its own type. So the nature of a Function is reasonable characterized by the nature of its parameter values which can be applied to the Function (that is their types) and the nature of the Functions result (that is the type of the result value). Again, we may separate the parameter types an the result type when expressing a Functions type – didn’t we already possess such an separator? Ahhh, now we should be able to express the types of our Functions …</p><p>As for our first example, in goes a first parameter value of type <em>Int </em>and a second parameter value also of type <em>Int</em>. Since the addition of two <em>Int </em>values evaluates to another <em>Int </em>value, the result is also of type <em>Int</em>, for which we can now express the type of the whole Function as follows …</p><blockquote><p><em>(&nbsp; Int,&nbsp; Int&nbsp; )&nbsp; =&gt;&nbsp; Int</em></p></blockquote><p>As a type can be generally seen as a collection of values that share some common characteristics, the above Function type represents all Functions that map two arguments of type <em>Int </em>to a result which is also of type <em>Int</em>. And while our Function is one specific member of that collection, we can think of a whole bunch of other Functions, also taking two arguments of type <em>Int </em>and resulting to an <em>Int</em>, hence sharing the same Function type (pretty much the same as we can choose from a whole bunch of Integer values that all share the same type <em>Int</em>).</p><p>As for our second example, we can repeat that game. All three parameters are of type <em>Int</em>. As we’ve seen, the last expression of the Functions body evaluates to a boolean value, so the result is of type <em>Boolean</em>. Now guess the type of the Function …</p><blockquote><p><em>(&nbsp; Int,&nbsp; Int,&nbsp; Int&nbsp; )&nbsp; =&gt;&nbsp; Boolean</em></p></blockquote><p>Ah, ok – now we’re able to infer and express the type of a Function. It’s pretty nice that we’re now capable to deduce the type by looking at the Function definition, but what about the compiler? Well, he does the same – trying to<a href="http://en.wikipedia.org/wiki/Type_inference" target="_blank"> infer the type</a> of a given Function. And sometimes, if the compiler isn’t able to deliver, we have to give him a swift kick in the pants and declare the type of a Function explicitly …</p><h2>Functions as first class values</h2><p>All in all, if you’re coming from an object oriented world, a Function seems nothing more than an ordinary method within an object. First of all, remember the last episode – a Function is only allowed to depend on the given parameters whereas a method may refer to the internal state of the object it’s a member of or – even worse – may alter the internal state of that object which can be seen as an evil side effect (we’ll come back to that aspect in a later episode).</p><p>For now, i want to show you the difference between a method and a Function from another angle: what is the type of a method? Uhm, well …<br>It turns out, that a method is <em>only </em>a member of a certain object. The object itself is of course an instance of a certain type, but the method itself has no type. Well, if that makes a little snarl in your head (as it did with mine when i thought about it the first time), let’s look at it from another perspective: As we’ve experienced, every Function has a type. And like any other type (like <em>Int </em>or <em>Boolean</em>) they are no special if used as parameter types or the result type within another Function (remember the first episode, where we’ve already mentioned the idea to pass Functions as arguments to other Functions within our <em>fold </em>example – more on that when we explore Higher Order Functions). So while it’s possible to pass a Function to another Function, it’s not possible to pass a method to a Function. It gets more weird if you think of a Functions result value: while its pretty natural to receive a Function as the result to a call of another Function (huh? normal? again – wait for the power of Higher Order Functions), you can’t think of a naked method as the result of a Function call since a method always needs an object it belongs to<em> </em>.</p><p>So while a method can’t be seen as a discrete value in its own right, a Function is! You may have heard of some functional civil rights activists, claiming Functions as<em> first class citizens</em> or <em>first class values</em>. Now you know why – because a Function isn’t anything worse or other than all the values of other types you already now. And like you’re allowed to give a value – of say type <em>Int </em>- an alias name (using <em>val</em>) and refer to that value by that alias, you can of course also do so with a function (since its also a value of that above mentioned Function type):</p><div id="highlighter_727645" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">val add&nbsp; =&nbsp; (&nbsp; x :Int,&nbsp; y :Int&nbsp; )&nbsp; =&gt;&nbsp; x&nbsp; +&nbsp; y</code></td></tr></tbody></table></div></div></div><p>Now we have an ‘alias’ name <em>add </em>for our Function.&nbsp; Whenever we refer to that <em>add</em>, we refer to the Function which is defined by that function literal on the right side of the equals sign.</p><p>Remember the above statement, the compiler isn’t sometimes in the position to infer the type of a Function and therefore we have to let’em off the hook by explicitly declaring the type of the Function? It turns out that type inference is generally unsteady when leveraging recursion:</p><div id="highlighter_141502" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">val power&nbsp; =&nbsp; (&nbsp; base: Int,&nbsp; exp :Int&nbsp; )&nbsp; =&gt;&nbsp; </code><code class="keyword">if</code><code class="plain">(&nbsp; exp &lt;= </code><code class="value">1</code>&nbsp; <code class="plain">) base&nbsp; </code><code class="keyword">else</code>&nbsp; <code class="plain">base * power(&nbsp; base,&nbsp; exp - </code><code class="value">1</code>&nbsp; <code class="plain">)</code></td></tr></tbody></table></div></div></div><p>If you try to compile that Function, the compiler will complain that he isn’t able to infer the Functions type:</p><blockquote><p><em>error: recursive value power needs type</em></p></blockquote><p>Ahh, the compiler recognizes our Function <em>power </em>as a value. Rightfully so! But now he’s asking for some help while he’s trying to solve our little riddle. Let’s give him what he’s longing for …</p><div id="highlighter_329925" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">val power : ( Int, Int ) =&gt; Int&nbsp; =&nbsp; ( base: Int, exp :Int ) =&gt; </code><code class="keyword">if</code><code class="plain">( exp &lt;= </code><code class="value">1</code> <code class="plain">) base </code><code class="keyword">else</code> <code class="plain">base * power( base, exp - </code><code class="value">1</code> <code class="plain">)</code></td></tr></tbody></table></div></div></div><p>So what we have here now is a full blown declaration of a Function. Everything on board: An alias name for refering to that Function later on, introduced as a <em>val</em>ue. An explicit type declaration for that value, so the compiler can settle back and relax. And of course the value itself – our Function literal, consisting of parameter list and Function body – the complete agenda. <a href="http://www.cs.nott.ac.uk/~gmh/" target="_blank">Graham Hutton</a>** would be pleased while phrasing it like so</p><blockquote><p><em>A Function is defined by using an equation that gives a name for the function, a name for each of its arguments, and a body that specifies how the result can be calculated in terms of the arguments </em></p></blockquote><p>By the way. See that <em>if</em> statement? Whoops – you know i shouldn’t say <em>statement </em>as its a term coming from the imperative world. In fact, it’s effectively an <em>if</em> expression in our case (since its the last expression in the Function body, it is treatet as an expression that has to evaluate to a result value). What’s the difference you may ask? Well, an expression always evaluates to a value of a certain type. So while we call it an <em>if expression</em>, it also have to evaluate to a value under all circumstances. And that means, that you can’t omit the <em>else </em>case if leveraging Scalas <em>if </em>as an expression (Note, that Scala as an object-functional language has to serve both worlds, so if you don’t employ Scalas <em>if </em>as an expression, you are allowed to omit the <em>else </em>case)!</p><h2>Function Application</h2><p>Now that we’ve defined our first functions, let’s use them! Let’s apply our Functions to some concrete argument values of the appropriate type!<br>Calling a Function in Scala looks pretty much the same as Function application is defined in mathematical Notation: its usually denoted by enclosing the arguments in parentheses, following the name of the Function.</p><p>Lucky we! Since we just saw how to give a Function a name (that is to declare a Function literal as a <em>val</em>ue of a certain Function type and relate that Function to a name<em> </em>), we’re now able to call it by simply refering to that name:</p><div id="highlighter_532901" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">val byteStates&nbsp; =&nbsp; power(&nbsp; </code><code class="value">2</code><code class="plain">,&nbsp; </code><code class="value">8</code>&nbsp; <code class="plain">)</code></td></tr></tbody></table></div></div></div><p>Admitted, nothing very exciting really happened.&nbsp; We’ve just applied our Function <em>power </em>to the base of 2 and an exponent of 8, calculating the number of different states of a single byte. Just note that Function application represents nothing more than another expression which evaluates to a value (that is the result value of that Function) of a certain type (that is the type of the Functions result value). And of course we can relate to that value by declaring another alias name for further reference (in this case <em>byteStates</em>). Ahh, and we already know that we don’t have to declare that values type explicitly, because the Scala compiler is able to infer it: in this case, value <em>byteStates</em> simply features the result type of the Function (while the type of the Function was already advertised to the compiler).</p><p>Since we enclose all arguments in parentheses, there’s no uncertainty about associativity: Function application has naturally always highest priority – it’s always clear which expressions are captured and used as arguments. Expressions as arguments? Got you! Since that feature seems so self-evident to us, it’s usually not worth to mention: of course you’re not only allowed to apply Functions to plain values, but also to some more complex expressions. Since expressions always evaluate to a value of a certain type in the end, the compiler is able to resolve that kind of composition:</p><div id="highlighter_890396" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">val isPythTriple_3_4_5 &nbsp; =&nbsp; &nbsp; add(&nbsp; power( </code><code class="value">3</code><code class="plain">, </code><code class="value">2</code> <code class="plain">),&nbsp; power( </code><code class="value">4</code><code class="plain">, </code><code class="value">2</code> <code class="plain">)&nbsp; ) &nbsp; == &nbsp; power( </code><code class="value">5</code><code class="plain">, </code><code class="value">2</code> <code class="plain">)</code></td></tr></tbody></table></div></div></div><p>This should give us no headache at all. What we have here is a neat expression which we can decompose easily: it’s a simple equality relation between two sub-expressions. On the left side’s a really really complex Function application, where the arguments of Function <em>add </em>(which expects two values of type <em>Int</em>) emerge out of two more sub-expresions which turn out to be some more function calls on <em>power </em>(which surprisingly evaluate both to a value of type <em>Int</em>). All in all no virgin soil here.</p><h2>Summary</h2><p>Wow, what a day -we just saw that Scala supports Function types in a very literal way. And the best: there’s nothing mysterious about it at all. You just need to get used to it – a Function is nothing more or less than any other value of your well known type universe. And just what you’re able to do with values of other types (think again of <em>Int</em>, <em>Boolean </em>or <em>List[String]</em>) you can also do with Functions: Relate them to an alias name, pass them around, get them back from Function calls – the whole clickedy clack …</p><p>Of course there are also some drawbacks we have to speak about, since  Scala is an object-functional langage which therefore has to take some  compromises. What about true <em>var</em>iables in conjunction with Functions? Can we apply some mutable objects as arguments to Functions? And if so, are we allowed to mutate them within the Function, triggering some kind of side effect? If a Function is already an instance of a certain Function type – what about polymorphic Functions vs. polymorphic methods (read generic, type parameterized methods)?</p><p>We’ve just scratched the surface. What we’ve now aquired is a good foundation for our further steps within the functional world. As we said at the beginning – we’re now able to eat the <em>bread and butter</em> of Functional Programming in Scala. But there’s also some marmalade, hazelnut spread, not to speak about the whole dessert. We’ll see different ways for defining Functions, e.g. in terms of other functions, new powerful ways of abstraction by leveraging some special, higher Order Functions (did i mention that already?) or just come up with new concepts of deriving Functions out of existing Functions. But each of them is a separate topic for another episode in the land of ‘Functional Scala’ …</p><hr><p style="display: inline; " class="readability-styled">* some would call </p><a href="http://en.wikipedia.org/wiki/Erik_Meijer_%28computer_scientist%29" target="_blank">Dr. Erik Meijer</a><p style="display: inline; " class="readability-styled"> simply a Functional purist, i just call him a really cool  guy who was able to spark my interest in Functional Programming</p><p>&nbsp;<br>** <a href="http://www.cs.nott.ac.uk/~gmh/" target="_blank">Dr. Graham Hutton</a> is another luminary of Functional Programming, who’s written a wundeful book called <a href="http://www.cs.nott.ac.uk/~gmh/book.html" target="_blank">Programming Haskell</a> (but be warned: while the book pretends to be an introduction to Haskell, i think in truth it strives for the proliferation of Functional Programming, if not world domination).
</p><!--adcode--><!--/adcode--></div></div></div><div id="readFooter"><div id="rdb-footer-print">Excerpted from <cite>Functional Scala: Functions « brain driven development</cite><br>http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/</div><div id="rdb-footer-wrapper"><div id="rdb-footer-left"><a href="http://lab.arc90.com/experiments/readability" id="readability-logo">Readability —&nbsp;</a><a href="http://www.arc90.com/" id="arc90-logo"> An Arc90 Laboratory Experiment&nbsp;</a> <span id="readability-url"> http://lab.arc90.com/experiments/readability</span></div><div id="rdb-footer-right"><a href="http://www.twitter.com/arc90" class="footer-twitterLink">Follow us on Twitter »</a><span class="version">Readability version 1.7.1</span></div></div></div></div></div></body></html>