<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0088)http://gleichmann.wordpress.com/2010/12/05/functional-scala-lambdas-and-other-shortcuts/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Functional Scala: Lambdas and other shortcuts « brain driven development</title>
<link rel="pingback" href="http://gleichmann.wordpress.com/xmlrpc.php">
<style type="text/css" media="screen"></style>
<link rel="alternate" type="application/rss+xml" title="brain driven development » Feed" href="http://gleichmann.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Comments Feed" href="http://gleichmann.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Functional Scala: Lambdas and other shortcuts Comments Feed" href="http://gleichmann.wordpress.com/2010/12/05/functional-scala-lambdas-and-other-shortcuts/feed/">

<link rel="stylesheet" href="./Functional Scala_Lambdas and other shortcuts_files/global.css" type="text/css">
<link rel="stylesheet" id="sharedaddy-css" href="./Functional Scala_Lambdas and other shortcuts_files/sharing.css" type="text/css" media="all">



<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gleichmann.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gleichmann.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="brain driven development" href="http://gleichmann.wordpress.com/">
<link rel="prev" title="Functional Scala: High, Higher, Higher Order Functions" href="http://gleichmann.wordpress.com/2010/11/28/high-higher-higher-order-functions/">
<link rel="next" title="Merry Christmas – or let it snow with Akka" href="http://gleichmann.wordpress.com/2010/12/19/merry-christmas-or-let-it-snow-with-akka/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="./Functional Scala_Lambdas and other shortcuts_files/Functional Scala_Lambdas and other shortcuts.htm">
<link rel="shortlink" href="http://wp.me/p95ru-7b">
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1293299661g" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1293299661g" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1293299669g">
	<style type="text/css"></style>
	<link rel="openid.server" href="http://gleichmann.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://gleichmann.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://gleichmann.wordpress.com/osd.xml" title="brain driven development">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
<style type="text/css"></style>
<meta name="application-name" content="brain driven development"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="a development driven blog"><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gleichmann.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico">


<link rel="stylesheet" type="text/css" href="./Functional Scala_Lambdas and other shortcuts_files/shThemeDefault.css"><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Functional Scala_Lambdas and other shortcuts_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Functional Scala_Lambdas and other shortcuts_files/services.css"><script type="text/javascript" src="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.js"></script><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.css" type="text/css" media="screen"><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability-print.css" media="print" type="text/css"></head>

<body class="style-newspaper" id="readabilityBody"><div id="readOverlay" class="style-newspaper"><div id="readTools"><a href="http://gleichmann.wordpress.com/2010/12/05/functional-scala-lambdas-and-other-shortcuts/#" onclick="return window.location.reload()" title="Reload original page" id="reload-page">Reload Original Page</a><a href="http://gleichmann.wordpress.com/2010/12/05/functional-scala-lambdas-and-other-shortcuts/#" onclick="javascript:window.print();" title="Print page" id="print-page">Print Page</a><a href="http://gleichmann.wordpress.com/2010/12/05/functional-scala-lambdas-and-other-shortcuts/#" onclick="readability.emailBox(); return false;" title="Email page" id="email-page">Email Page</a></div><div id="readInner" class="margin-x-narrow size-x-small"><h1>Lambdas and other shortcuts « brain driven development</h1><div id="readability-content"><div id="readability-page-1" class="page"><div class=""><p>In the <a href="http://gleichmann.wordpress.com/2010/11/28/high-higher-higher-order-functions/" target="_blank">last episode</a>, we discovered one of the most powerful concepts within the world of functional programming – Higher Order Functions. In essence, a Function is called higher ordered if it accepts another function as an argument or results into a function. This idea gives rise not only to some new ways of abstraction but also allows for pretty cool stuff like capturing or passing kind of state or building so called combinators (you may want to call them Function Makers) which will construct new functions out of some ingoing functions or some other input.<span id="more-445"></span></p><p>Especially talking about new forms of abstraction, we saw how to extract some use case specific, altering logic out of a function, only leaving the pure, common functionality. The specific logic was then defined within a function of its own and passed as an argument. This way we could came come up with one single function for filtering and a bunch of predicate functions, which determined how a list gets filtered in every which way. If this kind of abstraction sounds – well – to abstract, here’s the last version of our filter function again:</p><div id="highlighter_933638" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="keyword">val</code>&nbsp; <code class="plain">filter </code><code class="keyword">=</code> <code class="plain">( predicate </code><code class="keyword">:</code><code class="plain">Int </code><code class="keyword">=</code><code class="plain">&gt; Boolean, xs </code><code class="keyword">:</code><code class="plain">List[Int] )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; {</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>02</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(&nbsp; x &lt;- xs;&nbsp; </code><code class="keyword">if</code> <code class="plain">predicate( x )&nbsp; )&nbsp; </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content"><code class="keyword">val</code> <code class="plain">even </code><code class="keyword">=</code>&nbsp; <code class="plain">( x </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code><code class="plain">&gt; x </code><code class="keyword">%</code> <code class="value">2</code> <code class="keyword">==</code> <code class="value">0</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>06</code></td><td class="content"><code class="keyword">val</code> <code class="plain">odd </code><code class="keyword">=</code>&nbsp; <code class="plain">( x </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code><code class="plain">&gt; x </code><code class="keyword">%</code> <code class="value">2</code> <code class="keyword">==</code> <code class="value">1</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content"><code class="keyword">val</code> <code class="plain">candidates </code><code class="keyword">=</code> <code class="plain">List( </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code> <code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>10</code></td><td class="content"><code class="keyword">val</code> <code class="plain">evenValues </code><code class="keyword">=</code> <code class="plain">filter( even, candidates )</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="keyword">val</code> <code class="plain">oddValues </code><code class="keyword">=</code> <code class="plain">filter( odd, candidates )</code></td></tr></tbody></table></div></div></div><p>Tell me something new. We already knew that! It’s simply a higher order function beginning at line one and two predicate functions at line five and six. With those functions in the back, we can apply a list and an arbitrary predicate function to our <em>filter </em>function and receive a filtered list. And if we’d like to filter that list for primes, we simply define another appropriate predicate function. Now the question is, do we always have to define a predicate function first in order to pass it to our function <em>filter</em>? What is that for a question? Of course we need a function to pass it all way down to <em>filter </em>- it’s not gonna fall from heaven! Sure, sure, but you may remember the second episode about <a href="http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/" target="_blank">functions</a>, where we’ve seen pure function literals:</p><div id="highlighter_131800" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">(&nbsp; x </code><code class="keyword">:</code><code class="plain">Int,&nbsp; y </code><code class="keyword">:</code><code class="plain">Int&nbsp; )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; x&nbsp; +&nbsp; y</code></td></tr></tbody></table></div></div></div><p>Ahhh, remember? What we have here is simply the core of a function: the argument list followed by the function arrow and the body of the function. This one is a full fledged function, only without a given name. If you would define a function this way, there would be no way to refer to that function afterwards and hence you couldn’t call that function afterwards, because without a name it’s an anonymous one. And there we have a so called lambda expression! It’s just the pure, anonymous definition of a function.</p><p>And what’s that to do with our question? Well, even an anonymous function definition represents a value. It’s like defining any other value of any other type and don’t <em>relate </em>it to a name (as an alias for that value in order to refer to that value by the alias name afterwards):</p><div id="highlighter_371945" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">almostPi </code><code class="keyword">=</code> <code class="value">3.14159265</code>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="keyword">val</code> <code class="plain">mult </code><code class="keyword">=</code>&nbsp; <code class="plain">( x </code><code class="keyword">:</code><code class="plain">Int, y </code><code class="keyword">:</code><code class="plain">Int&nbsp; )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; x * y&nbsp;&nbsp;&nbsp; </code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>7</code></td><td class="content"><code class="plain">(&nbsp; x </code><code class="keyword">:</code><code class="plain">Int, y </code><code class="keyword">:</code><code class="plain">Int )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; x + y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></td></tr></tbody></table></div></div></div><p>And now imagine a function which takes an argument of type <em>Double</em>. Just like you could call that function with an alias name which refers to a value of type Double (like <em>double( almostPi )</em> ) you can of course also call that function directly with a literal of type Double (like <em>double( 2.71828182 )</em> ). Yawn, that’s bussines as usual. Exactly, like it’s completely common in functional programming to pass a lambda expression directly to higher order functions! And that’s the answer to our admittedly rather rhetorical question. So that means we don’t have to introduce a predicate function necessarily with a related name before we can use it within a call to a higher order function. Instead we could define it <em>ad hoc while</em> calling that function:</p><div id="highlighter_951740" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">evenValues </code><code class="keyword">=</code>&nbsp; <code class="plain">filter(&nbsp; ( x </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code><code class="plain">&gt; x </code><code class="keyword">%</code> <code class="value">2</code> <code class="keyword">==</code> <code class="value">0</code><code class="plain">, candidates )</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">positiveValues </code><code class="keyword">=</code> <code class="plain">filter( ( x </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code><code class="plain">&gt; x &gt; </code><code class="value">0</code><code class="plain">, candidates )</code></td></tr></tbody></table></div></div></div><p>Ok, nice. But what can that buy us, beside from relieving us to define one-time needed functions beforehand? Well, it turns out that we can reduce the amount of ceremonial code furthermore – hooray to Scala’s type inference mechanism! If you look closely at the type of function filter, you can detect that it’s of type<em> ( Int =&gt; Boolean, List[Int] ) =&gt; List[Int]</em>. And you’re not the only one to detect its type. The Scala compiler is able to debunk the functions type, too! And while the compiler therefore knows the type of the predicate function, it won’t require you to document your arguments with an explicit type annotation within your function literal (since the argument types are fully determined when defining that function ad hoc during the call of a higher order function).</p><div id="highlighter_781383" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">evenValues </code><code class="keyword">=</code>&nbsp; <code class="plain">filter(&nbsp; x </code><code class="keyword">=</code><code class="plain">&gt; x </code><code class="keyword">%</code> <code class="value">2</code> <code class="keyword">==</code> <code class="value">0</code><code class="plain">,&nbsp; candidates )</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">positiveValues </code><code class="keyword">=</code>&nbsp; <code class="plain">filter( x </code><code class="keyword">=</code><code class="plain">&gt; x &gt; </code><code class="value">0</code><code class="plain">,&nbsp; candidates )</code></td></tr></tbody></table></div></div></div><p>And you can get even more concise if you want to. In case you refer to every argument only once within your function body, you are allowed to completely omit the declaration of the argument list! Umm, ehmm, and how do i refer to my arguments within my functions body, then? In this case, the mythical underscore will come into operation for the first time. It’s a jack-of-all-trades (as we will see in further episodes), this time operating as a shortcut for a consecutive rererence to all arguments of the given argument list: every occurrence of the underscore within the functions body can be replaced by the value of the given argument – the first occurrence will refer to the value of the first argument, the second occurrence refers to the second argument, and so on.</p><div id="highlighter_80944" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">evenValues </code><code class="keyword">=</code>&nbsp; <code class="plain">filter(&nbsp; </code><code class="keyword">_</code> <code class="keyword">%</code> <code class="value">2</code> <code class="keyword">==</code> <code class="value">0</code><code class="plain">,&nbsp; candidates )</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">positiveValues </code><code class="keyword">=</code>&nbsp; <code class="plain">filter( </code><code class="keyword">_</code> <code class="plain">&gt; </code><code class="value">0</code><code class="plain">,&nbsp; candidates )</code></td></tr></tbody></table></div></div></div><p>In fact, this form is far too concise for some individuals! It seems like a matter of taste. But if you think in terms of readable code, it might hide too much information, for that matter (at least if you’re coming from a statically typed language like me). So as a short advice, you may apply the underscore only in a very<em> economical </em>way and in situations where context allows for easy recognition of the underlying types.</p><p>In fact, you’re allowed to use the underscore even within <em>legal </em>function definitions, as long as the compiler is able to infer the types of the given arguments. Where the following definition will provoke a compile error …</p><p>… this slightly adapted version will compile smoothness, since we’re able to explicitly annotate the type of every argument, which is identified by each single notation of the underscore within the function body:</p><div id="highlighter_547232" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">mult </code><code class="keyword">=</code>&nbsp; <code class="plain">( </code><code class="keyword">_</code> <code class="keyword">:</code><code class="plain">Int )&nbsp; *&nbsp; ( </code><code class="keyword">_</code> <code class="keyword">:</code><code class="plain">Int )</code></td></tr></tbody></table></div></div></div><p>In this case, the compiler has everything it needs to come up with a complete function value: there are two occurrences of the underscore, both annoteted with type <em>Int</em>. Hence the argument list for this function must consist of two arguments, each of type <em>Int</em>. Well, i’ll leave the choice up to you if this seems to be a reasonable form of function definition for you. However, there’s another <em>compromise </em>which may look a little more readable (at least to me) – you may declare the type of the whole expression explicitly when relating a function literal to an alias name:</p><div id="highlighter_643703" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">mult&nbsp; </code><code class="keyword">:</code> <code class="plain">(Int, Int) </code><code class="keyword">=</code><code class="plain">&gt; Int&nbsp;&nbsp; </code><code class="keyword">=</code> &nbsp; <code class="keyword">_</code> <code class="plain">* </code><code class="keyword">_</code></td></tr></tbody></table></div></div></div><p>Ok, here the context of both underscores is nicely described within the functions type annotation. Just look at the argument list and the arrangement of both underscores shouldn’t lead to any confusion, especially if the function body is as short as in the example at hand.</p><p>This time we’ve became aquainted with a new fancy term for function literals when defined anonymously: Lambda expressions. We’ve seen their usefulness especially in situations when it’s effectual to come up with some ad hoc defined functions, which may get <em>thrown away</em> after usage. Now you’ve got another spacy moniker for some special form of functions in your repertoire. Beside of that, we saw how to reduce some code ceremony, using the underscore as a placeholder for function arguments. As you’ve seen, its usage might be a matter of taste, since you may loose some type information along the way. However, it’s essential that the compiler never loose track of that type information, since Scala is a statically typed language (even Scala sometimes appeared to be a dynamic typed language, when you’re allowed to omit type information). In that case we have to provide the missing type information, be it by type annotating every single occurrence of the underscore within a functions body or by an explicit type notation of the whole function expression. In either case, you should become clear to the consequences – especially in terms of readability – when leveraging those shortcuts.
</p><!--adcode--><!--/adcode--></div></div></div><div id="readFooter"><div id="rdb-footer-print">Excerpted from <cite>Functional Scala: Lambdas and other shortcuts « brain driven development</cite><br>http://gleichmann.wordpress.com/2010/12/05/functional-scala-lambdas-and-other-shortcuts/</div><div id="rdb-footer-wrapper"><div id="rdb-footer-left"><a href="http://lab.arc90.com/experiments/readability" id="readability-logo">Readability —&nbsp;</a><a href="http://www.arc90.com/" id="arc90-logo"> An Arc90 Laboratory Experiment&nbsp;</a> <span id="readability-url"> http://lab.arc90.com/experiments/readability</span></div><div id="rdb-footer-right"><a href="http://www.twitter.com/arc90" class="footer-twitterLink">Follow us on Twitter »</a><span class="version">Readability version 1.7.1</span></div></div></div></div></div></body></html>