<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0073)http://gleichmann.wordpress.com/2010/10/28/functional-scala-introduction/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Functional Scala: Introduction « brain driven development</title>
<link rel="pingback" href="http://gleichmann.wordpress.com/xmlrpc.php">
<style type="text/css" media="screen"></style>
<link rel="alternate" type="application/rss+xml" title="brain driven development » Feed" href="http://gleichmann.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Comments Feed" href="http://gleichmann.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Functional Scala: Introduction Comments Feed" href="http://gleichmann.wordpress.com/2010/10/28/functional-scala-introduction/feed/">

<link rel="stylesheet" href="./Functional Scala_ Introduction_files/global.css" type="text/css">
<link rel="stylesheet" id="sharedaddy-css" href="./Functional Scala_ Introduction_files/sharing.css" type="text/css" media="all">



<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gleichmann.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gleichmann.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="brain driven development" href="http://gleichmann.wordpress.com/">
<link rel="prev" title="Talking about ‘Functional Scala in Practice’ at Java User Group – Frankfurt/Main" href="http://gleichmann.wordpress.com/2010/10/14/talking-about-%e2%80%98functional-scala-in-practice%e2%80%99-at-java-user-group-%e2%80%93-frankfurtmain/">
<link rel="next" title="Functional Scala: Functions" href="http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="./Functional Scala_ Introduction_files/Functional Scala_ Introduction.htm">
<link rel="shortlink" href="http://wp.me/p95ru-4K">
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1250548519g">
	<style type="text/css"></style>
	<link rel="openid.server" href="http://gleichmann.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://gleichmann.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://gleichmann.wordpress.com/osd.xml" title="brain driven development">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
<style type="text/css"></style>
<meta name="application-name" content="brain driven development"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="a development driven blog"><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gleichmann.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico">


<link rel="stylesheet" type="text/css" href="./Functional Scala_ Introduction_files/shThemeDefault.css"><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Functional Scala_ Introduction_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Functional Scala_ Introduction_files/services.css"><script type="text/javascript" src="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.js"></script><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.css" type="text/css" media="screen"><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability-print.css" media="print" type="text/css"></head>

<body class="style-newspaper" id="readabilityBody"><div id="readOverlay" class="style-newspaper"><div id="readTools"><a href="http://gleichmann.wordpress.com/2010/10/28/functional-scala-introduction/#" onclick="return window.location.reload()" title="Reload original page" id="reload-page">Reload Original Page</a><a href="http://gleichmann.wordpress.com/2010/10/28/functional-scala-introduction/#" onclick="javascript:window.print();" title="Print page" id="print-page">Print Page</a><a href="http://gleichmann.wordpress.com/2010/10/28/functional-scala-introduction/#" onclick="readability.emailBox(); return false;" title="Email page" id="email-page">Email Page</a></div><div id="readInner" class="margin-x-narrow size-x-small"><h1>Introduction « brain driven development</h1><div id="readability-content"><div id="readability-page-1" class="page"><div class=""><p>Welcome to the first part of a series of episodes about ‘Functional Scala’. While positioning itself as a so called object-functional language, most of the discussion and articles about Scala centered around its object oriented features so far. If you’re reading this, chances are you want to learn more about the functional side of Scala. Well, you’ve come to the right place.<span id="more-294"></span></p><p>The idea for the following episodes arose out of <a href="http://www.slideshare.net/mariogleichmann/functional-scala-i" target="_blank">some</a> <a href="http://www.slideshare.net/mariogleichmann/functional-scala-ii-in-practice" target="_blank">talks</a> i gave about ‘Functional Scala’. I decided to write and talk about it because I wanted to solidify my own knowledge about Functional Programming in general and about Scala in particular … and because I thought I could help some people new to Scala to learn  its functional features from my perspective.</p><p>Not least, there were some critical <a href="http://enfranchisedmind.com/blog/posts/scala-not-functional/" target="_blank">discussions</a> in the past whether Scala is rightfully characterized as a functional Language. For this to decide, we firstly have to be clear about the core ideas, you’ll regularly come across within widely accepted functional Languages, like Haskell. We’re going to see if and how they are offered in Scala and try to push them to its limits. So without any further ado, let’s enter the world of Functional Programming (FP) in Scala.</p><h2>Functional Programming vs. Imperative Programming</h2><p>If you’ve ever heard some people talking about the merits of Functional Programming, you’ve certainly wondered if all those incredible promises like simplicity, clarity and elegance (we are all looking for) are really reacheable when following this approach. Here’s a little qoute by David Pollak, the creator of a Web framework, called <a href="http://liftweb.net/" target="_blank">Lift</a>. Seems that he’s finally a convinced functional programmer, initially coined by the paradigm of imperative programming, after entering the functional world:</p><blockquote><p><em>But most importantly, Scala taught me to program and reason about programming</em><br><em>differently. I stopped thinking in terms of allocating buffers, structs, and objects, and of</em><br><em>changing those pieces of memory. Instead, I learned to think about most of my programs</em><br><em>as transforming input to output. This change in thinking has lead to lower defect rates,</em><br><em>more modular code, and more testable code</em></p></blockquote><p>How can this be? Aren’t we taught that object orientation (with object oriented languages as typical representatives for imperative languages) is all we need to write modular, maintainable code? What are the critical characteristics that differentiates Functional Programming from Imperative Programming?</p><p>Maybe we can detect some of these esential features by contrasting the implementation for solving a simple task like summing up a sequence of integers, let’s say&nbsp; from 1 to 10. We will do so in an imperative style and a second time using a functional style. Since Scala is an object-functional language, we’re able to use it for demonstrating both solutions:</p><h3>Imperative Style</h3><p>If you look closely at this piece of code, changes are … that you’ll see nothing really noticeable. That’s mostly because i didn’t focus your attention to any specific topic. In addition to that, if you are used to code within an imperative language, there’s nothing unusual to that piece of code: there are two variables which get assigned to new values while running trough the loop – after we get out of the loop, variable sum will hold the end result -&nbsp; that’s pretty normal, isn’t it?<br>The proper assignment of (intermediate-) values to that variables is warranted by the proper alignment of statements, that define the calculation of values and kind of instruct the correct order of value assignment. If you would swap line 4 with line 5 you may wouldn’t end up with the desired result.</p><p>In essence, we could abstract over this simple example and state the following:</p><blockquote><p><em>Imperative Programming is a programming paradigm that describes computation in terms of correctly ordered statements that change a programs state</em></p></blockquote><p>The fact that you can change the state of a variable give rise to some more interesting consequences: imagine you would call the loop some more times without reseting the two variables. If so you couldn’t rely any longer on the variable sum to hold only the sum of the values 1 up to 10 (the value of sum would depend on how often you’ve called the loop, right?). So in order to understand the intention of this piece of code you have to follow the whole sequence of statements and variable assignments. It’s not possible to only look at a single line and understand its meaning without understanding it’s surrounding statements. Thats because you have to follow the flow of variable reassignment. And in order to properly follow the flow of variable assignment you have to rely on the order in which the statements gets executed.</p><p>So there are two main characteristics you should keep in mind when thinking about imperative programming:&nbsp; Imperative Programming stands for an instruction based style which is expressed by a sequence of single instructions that specify precisely how the computation should proceed. This instruction based style is mainly mandated by the computation method of variable (re-)assignment (with all the consequences coming with it).</p><h3>Functional Style</h3><p>Let’s look at the solution written in a functional style:</p><div id="highlighter_789805" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">val sum = fold(&nbsp; </code><code class="value">1</code> <code class="plain">to </code><code class="value">10</code><code class="plain">,&nbsp; _ + _ )</code></td></tr></tbody></table></div></div></div><p>Wow, only a one-liner! But isn’t this cheating? Isn’t this only the effect of abstracting the loop away into that method (or what?) called <em>fold</em>? We now could take a deeper look into <em>fold</em>, but for now you have to believe me that there’s no such loop inside it which is based on variable (re-)assignment (we will take a deeper look into folds at some later episode!). Nevertheless,there is some indirect ‘evidence’ that there is no variable (re-)assigment within this piece of code:</p><h4>val vs. var</h4><p>First of all, take a look at the declaration of variable <em>sum</em>. This time it is declared using keyword <em>val</em>, which defines <em>sum </em>as an immutable value that can’t be reassigned. If you would try to assign another value to <em>sum</em>, the compiler would complain about that (that’s the reason why we had to define <em>sum </em>and <em>i</em> as mutable variables within the imperative example, using the keyword <em>var</em>). In the functional example, think of <em>sum </em>as an alias name that can be used whenever you want to refer to the expression on the right side (or the value to which that expression evaluates).</p><p>So while Scala is an object-functional Hybrid, it has to serve both worlds. But if you travell on the functional side, you may only use values (like the stairway book states, a Functional Programmer would only use <em>val</em>, while using <em>var </em>is akin to blasphemy).</p><h4>Functions</h4><p>It turns out, that <em>fold </em>is a function which accepts two parameters: a Set of values to fold and another function (huh?) which tells in which way to fold that values. Does this mean, that if we would like to fold that values and receive their product instead of their sum, we could throw in another function, doing multiplication? Yep, exactly!<br>This simple example shows a core characteristic of functional programming (no, it’s THE characteristic of functional Programming): its based on applying functions to arguments in order to receive some desired values (like the sum of some integers). Until we take a deeper look at Functions and their characteristics you can think of a function in a mathematical sense:</p><blockquote><p><em>A Function is a mapping that takes one or more arguments and produces a single result (typically by a function definition that specify how the result can by calculated solely in terms of its arguments). </em></p></blockquote><p>What you see here is a very short definition for a function. But this rather simple definition allows for a really powerful computation method: you can compute arbitrary results simply by applying functions to appropriate arguments. Since these arguments may also be other functions, you can come up with some new and powerful abstractions (as we will see when experiencing so called Higher Order Functions). Now the core idea for computation has shifted from a series of instructions (which specify precisely how the computation should proceed) to Notation of expressions, based on functions and values. You no longer have to follow a plan of instructions in order to understand a computation but decompose such an expression into its single elements.</p><p>You may have missed a single but extremely important word within the above Definition: The result of a function is <strong>solely </strong>dependend by its arguments. No global variables, no side-effects. This is pretty much what you would also expect when looking at functions in a mathematical sense. Let’s take a look at a simple function definition:</p><div id="highlighter_72520" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">val add = ( x: Int, y: Int )&nbsp; =&gt;&nbsp; x + y</code></td></tr></tbody></table></div></div></div><p>What we have here is a function definition which describes how to calculate a result in terms of the given (formal) parameters <em>x</em> and <em>y</em>. You may call these two parameters variables, but in mathematic those variables are always fixed values which are passed to the function when it is applied to some current values (the actual parameters during the function application). The same is true for Functions defined within a Functional Language – better said: the values to which a function is applied are simply values – nothing less but nothing more, and therefore immutable (while in an imperative language, a variable refers to a specific area within memory, which is occupied by a value)</p><h4>Stateless vs. Stateful</h4><p>We’ve seen, that the concept of a variable is only valid within the context of imperative languages, where the value of a variable may be changed different times. In a functional world (like in mathematic), there are only functions and values. A <em>variable name</em> is nothing more than an alias name for a certain expression which can’t be changed. It’s only another name you can use whenever you refer to that expression. If you want it – there are only constants, values and parameters.</p><p>Hence there is also no idea of an <em>assignment operation</em> within a functional language. And since there is no such thing like value (re-)assignment there can’t be any state in a purely functional program. Wow, no state? But there must be state!? There are Statefull Session Beans, the state pattern, … How can i ever implement such a thing like a counter if there’s no idea of state? Well, it turns out that in a functional world there are other <em>mechanisms </em>to handle the absence of state (and hence side <em>effects</em>), yet gives you also the possibility to handle <em>counting </em>in a functional style (as we will see) .</p><p>Now that we’ve seen those critical differences and have named some crucial ideas of the imperative world and the functional world, we’re ready for our final characterization of Functional Programming:</p><blockquote><p><em>Functional programming is a programming paradigm that describes computation as the evaluation of mathematical functions avoiding state, mutual data and therefore side effects</em></p></blockquote><h2>Don’t be afraid</h2><p>Don’t be afraid, we will come back to those ideas in greater detail and see how they manifest within Scala. This first episode just gave you some general backround and tried to motivate you for the ideas of functional Programming. We’ll see how far we can get with it using Scala.</p><p>Don’t be afraid if you are new to Scala or Functional Programming at all. I will start from zero from the next episode on … trying to demonstrate you some new ideas and problem solving concepts extending your toolbelt …</p><p>I failed to learn ‘Functional Scala’ approximately 2 times before finally grasping  it because it all just seemed too weird to me and I didn’t get it. But  then once it just “clicked” and after getting over that initial hurdle,  it was pretty much smooth sailing. I guess what I’m trying to say is: Scala is also great for functional programming and if you’re interested in programming you should  really learn it even if it seems weird at first. Learning ‘Functional Scala’ is  much like learning to program for the first time — it’s fun!</p><p>It forces  you to think differently … so come with me …
</p><!--adcode--><!--/adcode--></div></div></div><div id="readFooter"><div id="rdb-footer-print">Excerpted from <cite>Functional Scala: Introduction « brain driven development</cite><br>http://gleichmann.wordpress.com/2010/10/28/functional-scala-introduction/</div><div id="rdb-footer-wrapper"><div id="rdb-footer-left"><a href="http://lab.arc90.com/experiments/readability" id="readability-logo">Readability —&nbsp;</a><a href="http://www.arc90.com/" id="arc90-logo"> An Arc90 Laboratory Experiment&nbsp;</a> <span id="readability-url"> http://lab.arc90.com/experiments/readability</span></div><div id="rdb-footer-right"><a href="http://www.twitter.com/arc90" class="footer-twitterLink">Follow us on Twitter »</a><span class="version">Readability version 1.7.1</span></div></div></div></div></div></body></html>