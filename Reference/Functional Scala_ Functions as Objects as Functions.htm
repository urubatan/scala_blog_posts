<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0094)http://gleichmann.wordpress.com/2010/11/08/functional-scala-functions-as-objects-as-functions/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Functional Scala: Functions as Objects as Functions  « brain driven development</title>
<link rel="pingback" href="http://gleichmann.wordpress.com/xmlrpc.php">
<style type="text/css" media="screen"></style>
<link rel="alternate" type="application/rss+xml" title="brain driven development » Feed" href="http://gleichmann.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Comments Feed" href="http://gleichmann.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Functional Scala: Functions as Objects as Functions Comments Feed" href="http://gleichmann.wordpress.com/2010/11/08/functional-scala-functions-as-objects-as-functions/feed/">

<link rel="stylesheet" href="./Functional Scala_ Functions as Objects as Functions_files/global.css" type="text/css">
<link rel="stylesheet" id="sharedaddy-css" href="./Functional Scala_ Functions as Objects as Functions_files/sharing.css" type="text/css" media="all">



<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gleichmann.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gleichmann.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="brain driven development" href="http://gleichmann.wordpress.com/">
<link rel="prev" title="Functional Scala: Functions" href="http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/">
<link rel="next" title="Functional Scala: Closures" href="http://gleichmann.wordpress.com/2010/11/15/functional-scala-closures/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="./Functional Scala_ Functions as Objects as Functions_files/Functional Scala_ Functions as Objects as Functions.htm">
<link rel="shortlink" href="http://wp.me/p95ru-56">
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1268811525g">
	<style type="text/css"></style>
	<link rel="openid.server" href="http://gleichmann.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://gleichmann.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://gleichmann.wordpress.com/osd.xml" title="brain driven development">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
<style type="text/css"></style>
<meta name="application-name" content="brain driven development"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="a development driven blog"><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gleichmann.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico">


<link rel="stylesheet" type="text/css" href="./Functional Scala_ Functions as Objects as Functions_files/shThemeDefault.css"><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Functional Scala_ Functions as Objects as Functions_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Functional Scala_ Functions as Objects as Functions_files/services.css"><script type="text/javascript" src="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.js"></script><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.css" type="text/css" media="screen"><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability-print.css" media="print" type="text/css"></head>

<body class="style-newspaper" id="readabilityBody"><div id="readOverlay" class="style-newspaper"><div id="readTools"><a href="http://gleichmann.wordpress.com/2010/11/08/functional-scala-functions-as-objects-as-functions/#" onclick="return window.location.reload()" title="Reload original page" id="reload-page">Reload Original Page</a><a href="http://gleichmann.wordpress.com/2010/11/08/functional-scala-functions-as-objects-as-functions/#" onclick="javascript:window.print();" title="Print page" id="print-page">Print Page</a><a href="http://gleichmann.wordpress.com/2010/11/08/functional-scala-functions-as-objects-as-functions/#" onclick="readability.emailBox(); return false;" title="Email page" id="email-page">Email Page</a></div><div id="readInner" class="margin-x-narrow size-x-small"><h1>Functions as Objects as Functions « brain driven development</h1><div id="readability-content"><div id="readability-page-1" class="page"><div class=""><p>Welcome back to the third episode of Functional Scala!<br>This time i want to take you for a short ride to some Scala internals and open the curtain for that arcane Function types i talked about the <a href="http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/" target="_blank">last episode</a>. That said, this episode is more about some<em> Specialité de Scala</em> rather than about Functional Programming in general.<span id="more-316"></span></p><p>Remember that we’re able to define Functions simply by specifying a Function literal, consisting of the Functions parameter list and the Function body (delimited by that Function arrow =&gt;)&nbsp; and may declare that Function as a named value of a certain Function type:</p><div id="highlighter_790597" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">val power : ( Int, Int ) =&gt; Int&nbsp; =&nbsp; ( base: Int, exp :Int ) =&gt; </code><code class="keyword">if</code><code class="plain">( exp &lt;= </code><code class="value">1</code> <code class="plain">) base </code><code class="keyword">else</code> <code class="plain">base * power( base, exp - </code><code class="value">1</code> <code class="plain">)</code></td></tr></tbody></table></div></div></div><p>There we go again! What you should recognize is an ordinary Funtion, which can by applied to two arguments each of type <em>Int</em>, resulting into another value of type <em>Int</em>. Thus the type of the Function is</p><blockquote><p><em>(&nbsp; Int,&nbsp; Int&nbsp; )&nbsp; =&gt;&nbsp; Int</em></p></blockquote><p>Nothing new here! We already knew, that every Function is an instance of a certain Function type!</p><h2>But everything is an Object ?</h2><p>You surely have heard about it. In Scala, everything is an Object. No primitives, no wrapper types, no autoboxing (at least not in front of your face). But what about our neat Functions? I mean, Functions belong to the functional world, objects belong to the object oriented world, right? Well, since Scala is an object functional Hybrid, it has to make a match between the two. And since every value is an Object in Scala, Functions are Objects, too! Simple as that! Huh?</p><h3>FunctionN</h3><p>It turns out, that every Function you’ll ever define in Scala, will become an instance of an Implementation which will feature a certain Function <a href="http://www.scala-lang.org/node/126" target="_blank">Trait</a> (ok, if you have no clue what a Trait is, but may have ever heard about Java, think about Traits as a kind of an Interface on Steroids as a starting point and for the sake of simplicity). There is a whole bunch of that Function Traits, ranging from <em>Function1 </em>up to <em>Function22</em>. Wow, and why are there so many? Does the producers of Scala have come up with heavy artillery and spared no expense or effort in order to show the importance of Functions? Well, sort of. Since Functions are Objects in Scala and Scala is a statically typed language, it has to provide an appropriate type for every Function which comes with a different number of arguments. If you define a Function with two arguments, the compiler picks <em>Function2 </em>as the underlying type. If you define a Function with seven arguments, you’ll end up with <em>Function7</em>. And since there is a maximum up to <em>Function22</em>, that means you can’t define a Function which will accept 23 arguments or more – isn’t that a pity?</p><p>Let’s take a closer look! Remember that Function from the last episode which takes three parameters each of type <em>Int </em>and results into a boolean value, indicating whether that three incoming arguments form a so called <a href="http://en.wikipedia.org/wiki/Pythagorean_triple" target="_blank">Pythagorean triple</a>?</p><div id="highlighter_764048" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">val pythTriple :&nbsp; ( Int, Int, Int ) =&gt; Boolean&nbsp;&nbsp; =&nbsp;&nbsp; (&nbsp; a :Int,&nbsp; b :Int,&nbsp; c :Int&nbsp; )&nbsp; =&gt;&nbsp; {</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>6</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">aSquare + bSquare == cSquare</code></td></tr></tbody></table></div></div></div><p>Now guess the Function Trait you’ll end up for that Function? If you haven’t picked <em>Function3</em>, you regrettably only won the second prize.<br>Ok, a Function with 3 arguments and you end up with <em>Function3</em>, a Function with n arguments and you end up with <em>FunctionN</em>. That’s all well and good, but what about the argument types? And by the way, what about the type of the Functions result? You certainly already hit on type parameters, and you’re right! Let’s take a look at e.g. Trait <em>scala.Function3</em>.&nbsp; I will only show you the parts which are relevant for this episode:</p><div id="highlighter_169983" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">trait Function3[-T1, -T2, -T3, +R] </code><code class="keyword">extends</code> <code class="plain">AnyRef {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">def apply( v1 :T1, v2 :T2, v3 :T3 ) : R</code></td></tr></tbody></table></div></div></div><p>Do you already recognize your Function? It turns out that the three type parameters <em>T1</em>, <em>T2</em> and <em>T3</em> will take the type of the arguments, while type parameter <em>R</em> represents the type of the Functions result. Don’t worry about the leading sign in Front of the type parameters for now. They show you the kind of <a href="http://programming-scala.labs.oreilly.com/ch12.html" target="_blank">variance</a> for each of them (while the arguments are contravariant, the result behaves covariant. But don’t bother – if you know about the<a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle" target="_blank"> Liskov Substitution Principle</a> and the art on how to use subtypes in place of&nbsp; supertypes in a proper way, you’ll gain a good intuition for what the variance of that type parameters try to express).</p><p>Now, for every tangible Function we define in our well known literal way, the compiler will come up with an instance of the appropriate Function trait, where the type parameters are parametrized with the given types of the arguments and the type of the Functions result. Wait a moment. But our Function already got a type. Take a look at the above example. The type of Function <em>pythTriple </em>clearly is</p><blockquote><p><em>( Int, Int, Int )&nbsp; =&gt;&nbsp; Boolean</em></p></blockquote><p>Well, yes! But that is only syntactic sugar for the appropriate Function type that come into operation. It’ pretty the same as</p><blockquote><p><em>Function3[Int,Int,Int,Boolean]</em></p></blockquote><p>And yes, since one form of type declaration is only syntactic sugar for the other, you can use both interchangeably. So we could have also defined our Function this way:</p><div id="highlighter_965104" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">val pythTriple&nbsp; :&nbsp; Function3[Int,Int,Int,Boolean]&nbsp;&nbsp; = &nbsp; ( a :Int, b :Int, c :Int ) =&gt; ...</code></td></tr></tbody></table></div></div></div><p>Aye! But one thing left. Now guess what that abstract method <em>apply </em>is representing? Right, it’s the method which get’s called on Function application (so the Function body is going to reside within that method)! Ah, do you already smell another kind of syntactic sugar? It’s true, our well appreciated, mathematical touched Notation of Function application simply by enclosing the arguments in parentheses, following the name of  the Function is again only syntactic sugar for calling method <em>apply </em>with some given arguments. So more funny mixing of those two kind of Notations is possible.</p><p>On the one hand, you could trigger Function application by explicitly calling method <em>apply </em>on a given Function:</p><div id="highlighter_994211" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">val isPythTriple_3_4_5&nbsp; =&nbsp; pythTriple.apply( </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code> <code class="plain">)</code></td></tr></tbody></table></div></div></div><p>And the other way round, you may also give birth to a Function by implementing an appropriate Function Trait and define its required <em>apply </em>method in terms of the function body. In our example, it’s <em>Function3</em>:</p><div id="highlighter_185578" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">val isPythTripple2 : (Int,Int,Int) =&gt; Boolean = </code><code class="keyword">new</code> <code class="plain">Function3[Int,Int,Int,Boolean]{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">def apply( a :Int, b :Int, c :Int ) : Boolean = {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>7</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">aSquare + bSquare == cSquare</code></td></tr></tbody></table></div></div></div><h2>Beware of the temptations</h2><p>As you’re free to define a Function in a more object oriented style by providing an anonymous implementation for a <em>FunctionN</em> like in the above example, or even by creating a new class which is extending a certain Function Trait (where the instances of that class constitute a Function, not the class itself), it’s very easy and tempting to introduce not only behaviour but also state, simply because a class allows you to declare not only methods but also fields. And since those fields may also be declared as <em>var</em>iables (remember, Scala has to serve the functional and the imperative world), nothing prevents you to write a Function with side effects (that is, a Function which not only depends on its arguments, or not only produces a single value as the result of its application):</p><div id="highlighter_171478" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="keyword">class</code> <code class="plain">Last( init : Int ) </code><code class="keyword">extends</code> <code class="plain">Function1[Int,Int]{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>04</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">def apply( x :Int ) : Int = {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="plain">val last : Int =&gt; Int &nbsp; = &nbsp; </code><code class="keyword">new</code> <code class="plain">Last( </code><code class="value">1</code> <code class="plain">)</code></td></tr></tbody></table></div></div></div><p>Ok, this is not a very helpful Function in its own, but it shows you some of the weaknesses, when it comes to the question if Scala promotes a functional style. At least, it doesn’t prevent you from writing impure, side effecting functions. As a reminder, a pure Function only depends on its argument, thus whenever you apply that function to a certain argument <em>x</em>, it always results to the same result <em>f(x)</em>, no matter how often you apply that argument (this characteristic is clearly broken for Function <em>last</em>: if you look carefully at line 13 and 14, you see that the Function is applied twice to the same argument 5, but results to different values). This feature is sometimes stated as the <a href="http://www.cs.uwyo.edu/~jlc/courses/3015/HW/hw3e.pdf" target="_blank"><em>Equality of Functions</em></a>, as Function application maintains equality of their arguments. If&nbsp; you strive for a formal, more mathematical description for that feature, a i can calm down your curiosity. It goes something like this:</p><blockquote><p><em>x == y&nbsp; &nbsp; &lt;==&gt; &nbsp;&nbsp; f( x ) == f( y )</em></p></blockquote><p>No, this is not a lecture in mathematics. But if you don’t take off now, we’ll coming to another interesting feature of pure Functions. As we stated above, we alway receive the same value every time we apply a function to the same argument. And this also means, that we may call that Function at any later time and still receive the same value, hence there is no notion of time in a Functional world. Ahh, and now we have full circle: If there is no notion of time, it doesn’t matter in which order i place my Function calls, i.e. in which order they get executed. That was one of the intriguing features of Functional programming when compared to the paradigm of imperative programming in <a href="http://gleichmann.wordpress.com/2010/10/28/functional-scala-introduction/" target="_blank">episode one</a>. In an imperative, state changing world i always have to be aware in which order the statements get executed. And if you take another look at the above example, since our Function is impure, the relevance of time slips in again (as you may see in line 17. For the result value to explain, it’s no longer sufficient to look at the function definition, but also to be aware of the order in which the function get’s called – in this case, which argument was applied to the Function the last time).</p><h2>Quintessence</h2><p>So if there’s is one thing you should remember from this episode, than it is the dangerous seduction of introducing state into your Functions, since you’re entirely free to mix the literal style and the underlying object oriented notation in every which way you want. As soon as there is state, there’s automatically an impact of time when it comes to execution. You can minimize that risk if you stick to the literal form when defining Functions, since it’s much more difficult to introduce state this way. Just keep in mind, that a Function always boils down to an instance (that is an object) of a certain Function type, at least under Scala’s hood. There’s no escape from it!</p><hr><h3>Addendum</h3><p>Since a Function boils down to an Object in Scala, you may have wondered if there’s a similar solution for Java. And in fact, there are some libraries which aim to bring a breeze of functional programming to Java. You may take a look at <a href="http://code.google.com/p/lambdaj/" target="_blank">lambdaj</a> or <a href="http://functionaljava.org/" target="_blank">Functional Java</a>. I even wrote a library <a href="https://github.com/mariogleichmann/functJ">functJ</a> on my own some time ago for experimenting on how to avoid as much boilerplate as possible when it comes to Function definition. As we will hopefully see in some of the following episodes, Scala provides not only a smooth integration of Function literals as syntactic sugar, but carries some more ideas of Functional programming to the Java platform.
</p><!--adcode--><!--/adcode--></div></div></div><div id="readFooter"><div id="rdb-footer-print">Excerpted from <cite>Functional Scala: Functions as Objects as Functions « brain driven development</cite><br>http://gleichmann.wordpress.com/2010/11/08/functional-scala-functions-as-objects-as-functions/</div><div id="rdb-footer-wrapper"><div id="rdb-footer-left"><a href="http://lab.arc90.com/experiments/readability" id="readability-logo">Readability —&nbsp;</a><a href="http://www.arc90.com/" id="arc90-logo"> An Arc90 Laboratory Experiment&nbsp;</a> <span id="readability-url"> http://lab.arc90.com/experiments/readability</span></div><div id="rdb-footer-right"><a href="http://www.twitter.com/arc90" class="footer-twitterLink">Follow us on Twitter »</a><span class="version">Readability version 1.7.1</span></div></div></div></div></div></body></html>