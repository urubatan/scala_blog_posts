<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0081)http://gleichmann.wordpress.com/2011/01/23/functional-java-polymorphic-functions/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><!--
	generated in 0.326 seconds
	57644 bytes batcached for 300 seconds
--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Functional Scala: Polymorphic Functions ?!? « brain driven development</title>
<link rel="pingback" href="http://gleichmann.wordpress.com/xmlrpc.php">
<style type="text/css" media="screen"></style>
<link rel="alternate" type="application/rss+xml" title="brain driven development » Feed" href="http://gleichmann.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Comments Feed" href="http://gleichmann.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Functional Scala: Polymorphic Functions ?!? Comments Feed" href="http://gleichmann.wordpress.com/2011/01/23/functional-java-polymorphic-functions/feed/">

<link rel="stylesheet" href="./Functional Scala  Polymorphic Functions_files/global.css" type="text/css">
<link rel="stylesheet" id="sharedaddy-css" href="./Functional Scala  Polymorphic Functions_files/sharing.css" type="text/css" media="all">



<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gleichmann.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gleichmann.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="brain driven development" href="http://gleichmann.wordpress.com/">
<link rel="prev" title="Functional Scala: Turning Methods into Functions (or WTF is eta expansion?)" href="http://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="./Functional Scala  Polymorphic Functions_files/Functional Scala  Polymorphic Functions.htm">
<link rel="shortlink" href="http://wp.me/p95ru-87">
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1293299541g" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1293299541g" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1293299549g">
	<style type="text/css"></style>
	<link rel="openid.server" href="http://gleichmann.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://gleichmann.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://gleichmann.wordpress.com/osd.xml" title="brain driven development">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
<style type="text/css"></style>
<meta name="application-name" content="brain driven development"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="a development driven blog"><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gleichmann.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico">




<link rel="stylesheet" type="text/css" href="./Functional Scala  Polymorphic Functions_files/shThemeDefault.css"><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Functional Scala  Polymorphic Functions_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Functional Scala  Polymorphic Functions_files/services.css"><script type="text/javascript" src="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.js"></script><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.css" type="text/css" media="screen"><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability-print.css" media="print" type="text/css"></head>

<body class="style-newspaper" id="readabilityBody"><div id="readOverlay" class="style-newspaper"><div id="readTools"><a href="http://gleichmann.wordpress.com/2011/01/23/functional-java-polymorphic-functions/#" onclick="return window.location.reload()" title="Reload original page" id="reload-page">Reload Original Page</a><a href="http://gleichmann.wordpress.com/2011/01/23/functional-java-polymorphic-functions/#" onclick="javascript:window.print();" title="Print page" id="print-page">Print Page</a><a href="http://gleichmann.wordpress.com/2011/01/23/functional-java-polymorphic-functions/#" onclick="readability.emailBox(); return false;" title="Email page" id="email-page">Email Page</a></div><div id="readInner" class="margin-x-narrow size-x-small"><h1>Polymorphic Functions ?!? « brain driven development</h1><div id="readability-content"><div id="readability-page-1" class="page"><div class=""><p>Welcome to another episode of Functional Scala!</p><p>If you’re coming from the object oriented world, chances are good that you’ve already heard something about a concept called Polymorphism. You may also know that there are different classes of Polymorphism out there: most of us are familiar with so called<em> <a href="http://en.wikipedia.org/wiki/Subtype_polymorphism" target="_blank">(Sub-)Type polymorphism</a></em> and <a href="http://en.wikipedia.org/wiki/Parametric_polymorphism" target="_blank">Parametric polymorphism</a> (you may call it Generics).</p><p>Since functions take a central role within Functional Programming (i need to mention this, in case you’ve forgotten it), we want to take a closer look if Scala allows for so called polymorphic functions, which plays in the area of parametric polymorphism. If you’re now asking what the heck do we need polymorphic functions for (if anything), you’re coming to the right place!</p><h3>Parametric polymorphism on types</h3><p>Let’s start the journey and take a look at an example of a polymorphic type, coming from well- known ground: Lists …<br>You may know, that a List can take elements of an arbitrary type. In fact, a raw List on and off itself isn’t a <em>real </em>type in Scala. Well, of course is <em>List </em>a type! With <em>real </em>type, i mean a type which needn’t to be parameterized with another type in order to work with, such as type <em>String</em> or <em>Int</em>. So all types for which you’re able to define some concrete values, i will call <em>real </em>type in the following sections.</p><div id="highlighter_90989" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">names </code><code class="keyword">:</code> <code class="plain">List[String] </code><code class="keyword">=</code> <code class="plain">List( </code><code class="string">"Anne"</code><code class="plain">, </code><code class="string">"George"</code><code class="plain">, </code><code class="string">"Carla"</code> <code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="keyword">val</code> <code class="plain">primes </code><code class="keyword">:</code> <code class="plain">List[Int] </code><code class="keyword">=</code> <code class="plain">List( </code><code class="value">11</code><code class="plain">, </code><code class="value">17</code><code class="plain">, </code><code class="value">19</code> <code class="plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">things </code><code class="keyword">:</code> <code class="plain">List </code><code class="keyword">=</code> <code class="plain">List( </code><code class="string">"Anne"</code><code class="plain">, </code><code class="value">17</code><code class="plain">, </code><code class="keyword">true</code> <code class="plain">)</code></td></tr></tbody></table></div></div></div><p>See that explicit type declaration at line 3? We said that <em>things </em>should be of <em>raw</em> type List. But since List isn’t a <em>real </em>type, the compiler complains with</p><blockquote><p><em>type List takes type parameters</em></p></blockquote><p>Well, so you always need to declare a concrete instance of a List in the light of the type for the Lists elements (like you see at line 1 and 3) for creating a <em>real </em>Type (like List[String] or List[Int]). From that point of view, you can say that <em>List </em>is a so called <em>Type Constructor</em>: it takes one type (e.g. <em>String</em>) and results into a real type (eg. <em>List[String]</em>). So if we now abstract over types, we would lend ourself in the land of so called <em>kinds</em>, in which you could talk about the nature of types on a meta level (but that would be a topic for a whole episode in itself).</p><p>Just remember why we name <em>List </em>polymorphic: As a raw type it doesn’t matter of which types the elements of a List are. This is expressed by applying a type parameter to <em>List </em>(take a look at the definition of type List – there you’ll find something like <em>List[T]</em> – variance aside), which abstracts over the concrete type of the elements. But as soon as you want to declare a concrete instance, you need to <em>type parameterize</em> List in order to get a real type. Sounds funny? At least if you haven’t played with those <em>kind </em>of <em>types</em>. All in all, it’s a more or less complicated description for generic types (e.g. if you come from Java-land).</p><h3>Parametric polymorphism on functions</h3><p>If you look back at some earlier episodes, we’ve always defined functions on real types:</p><div id="highlighter_713307" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">filter </code><code class="keyword">=</code> <code class="plain">( predicate </code><code class="keyword">:</code><code class="plain">Int </code><code class="keyword">=</code><code class="plain">&gt; Boolean, xs </code><code class="keyword">:</code><code class="plain">List[Int] ) </code><code class="keyword">=</code><code class="plain">&gt; {</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">( x &lt;- xs; </code><code class="keyword">if</code> <code class="plain">predicate( x ) ) </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="keyword">val</code> <code class="plain">positiveNums </code><code class="keyword">=</code> <code class="plain">filter( SomeFilters.isPositive, List( </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code> <code class="plain">) )</code></td></tr></tbody></table></div></div></div><p>As you may see, <em>filter </em>only works on a real type <em>List[Int]</em>. If we wanted to reuse <em>filter </em>for – say – filtering a List of Strings we’ve fooled up so we need to come up with another filter function for <em>List[String]</em> … ? Well, yes and no. For this to answer, we’ll now take a short detour and come back to that question afterwards – promised!</p><p>First of all, let’s take a look at a somewhat more simple example. Let’s write a function which can be applied to an arbitrary List instance and decide if that instance is empty or not. For this to decide, our function doesn’t depent on the conrete type of the List elements. That said, take a look at the following function definition:</p><div id="highlighter_187551" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">empty </code><code class="keyword">=</code> <code class="plain">( xs </code><code class="keyword">:</code><code class="plain">List[</code><code class="keyword">_</code><code class="plain">] ) </code><code class="keyword">=</code><code class="plain">&gt; xs </code><code class="keyword">==</code> <code class="plain">Nil</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">names </code><code class="keyword">:</code> <code class="plain">List[String] </code><code class="keyword">=</code> <code class="plain">List( </code><code class="string">"Anne"</code><code class="plain">, </code><code class="string">"George"</code><code class="plain">, </code><code class="string">"Carla"</code> <code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>4</code></td><td class="content"><code class="keyword">val</code> <code class="plain">primes </code><code class="keyword">:</code> <code class="plain">List[Int] </code><code class="keyword">=</code> <code class="plain">List( </code><code class="value">11</code><code class="plain">, </code><code class="value">17</code><code class="plain">, </code><code class="value">19</code> <code class="plain">)</code></td></tr></tbody></table></div></div></div><p>The action goes on at line 1 – a neat function which says that it accepts an arbitrary instance of List, type parameterized for some type we’re not interested in. Aaah – and there goes the mighty underscore again, used to designate a so called <em>Existential Type</em>: we’re informing the compiler, that there must exist such a concrete type, but we don’t care which type it is – it might be a List of Strings or a List of Booleans, we simply don’t care.</p><p>If you would give our function an explicit type annotation, it would look like this:</p><div id="highlighter_547277" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">empty </code><code class="keyword">:</code> <code class="plain">List[</code><code class="keyword">_</code><code class="plain">] </code><code class="keyword">=</code><code class="plain">&gt; Boolean&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( xs </code><code class="keyword">:</code><code class="plain">List[</code><code class="keyword">_</code><code class="plain">] ) </code><code class="keyword">=</code><code class="plain">&gt; xs </code><code class="keyword">==</code> <code class="plain">Nil</code></td></tr></tbody></table></div></div></div><p>Wait wait wait, you may say. We’ve already learned that the above defined Function literal comes down to a concrete implementation of trait <em>Function1[-T,+R]</em>. And you’re right! Remember? A Function is a first class value of a certain type. And like any other value it needs a <em>real </em>type to come into life! So of what type is our function then? Well, it turns out that the compiler will treat an existential type (within function definition) like the most general real type there is: and you know what, it’s <em>Any</em>. So it would be fully legal to define our function like so:</p><div id="highlighter_529757" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">empty </code><code class="keyword">:</code> <code class="plain">List[Any] </code><code class="keyword">=</code><code class="plain">&gt; Boolean&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( xs </code><code class="keyword">:</code><code class="plain">List[</code><code class="keyword">_</code><code class="plain">] ) </code><code class="keyword">=</code><code class="plain">&gt; xs </code><code class="keyword">==</code> <code class="plain">Nil</code></td></tr></tbody></table></div></div></div><p>This is all fine, as long as we don’t refer to an instance of that type or some special characterisitcs of that type within our function (or the other way around, it’s all good as long you refer to an instance and treat them as <em>Any</em>).</p><p>Now let’s write another function, accepting a concrete Pair (a <em>Tuple2</em>, which is also a <em>Type Constructor</em>) and returning the first component. As we just learned about existential types, let’s give it a go:</p><div id="highlighter_807957" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">first </code><code class="keyword">:</code><code class="plain">Tuple</code><code class="value">2</code><code class="plain">[</code><code class="keyword">_</code><code class="plain">,</code><code class="keyword">_</code><code class="plain">] </code><code class="keyword">=</code><code class="plain">&gt; </code><code class="keyword">_</code> <code class="keyword">=</code> <code class="plain">( pair </code><code class="keyword">:</code><code class="plain">Tuple</code><code class="value">2</code><code class="plain">[</code><code class="keyword">_</code><code class="plain">,</code><code class="keyword">_</code><code class="plain">] ) </code><code class="keyword">=</code><code class="plain">&gt; pair.</code><code class="keyword">_</code><code class="value">1</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">person </code><code class="keyword">=</code> <code class="plain">( </code><code class="string">"Anne"</code><code class="plain">, </code><code class="value">27</code> <code class="plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="keyword">val</code> <code class="plain">name </code><code class="keyword">=</code> <code class="plain">first( person )</code></td></tr></tbody></table></div></div></div><p>Looks easy! Function <em>first </em>takes any Pair with its first and second component of an arbitrary type, then picks and returns the first component. But of what type is the returned value? If you take a look at the example, you see that the first component is of type <em>String</em>, Hence <em>name </em>should of cource be also of type <em>String</em>! Ehm, remember what we said about how the compiler treats an existential type? Down in our function (which picks the first component within the functions body), all we can state about the type of the pairs first component, is … right … that it’s of type <em>Any</em>. Hence the type annotation of our function could also be rewritten like this:</p><div id="highlighter_508886" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">first </code><code class="keyword">:</code><code class="plain">Tuple</code><code class="value">2</code><code class="plain">[Any,Any] </code><code class="keyword">=</code><code class="plain">&gt; Any&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( pair </code><code class="keyword">:</code><code class="plain">Tuple</code><code class="value">2</code><code class="plain">[Any,Any] ) </code><code class="keyword">=</code><code class="plain">&gt; pair.</code><code class="keyword">_</code><code class="value">1</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">name </code><code class="keyword">:</code><code class="plain">Any </code><code class="keyword">=</code> <code class="plain">first( person )</code></td></tr></tbody></table></div></div></div><p>That’s a pitty! Since we already know the type of the first component, we can’t make use of it, if the value is extracted by our function (which kind of generalizes the type to <em>Any</em>). So what are our options?</p><h3>Function classes</h3><p>Unfortunately, we’ve already seen, it’s kind of impossible to write that kind of polymorphic functions, since trait <em>FunctionN</em> always needs some concrete types when bringing some <em>function values</em> into life. But wait another minute. What about writing a type parameterized class which implements our Function trait? Let’s give it a try:</p><div id="highlighter_263235" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">class</code> <code class="plain">First[T] </code><code class="keyword">extends</code> <code class="plain">Function</code><code class="value">1</code><code class="plain">[Tuple</code><code class="value">2</code><code class="plain">[T,</code><code class="keyword">_</code><code class="plain">],T]{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="keyword">def</code> <code class="plain">apply( pair </code><code class="keyword">:</code><code class="plain">Tuple</code><code class="value">2</code><code class="plain">[T,</code><code class="keyword">_</code><code class="plain">] ) </code><code class="keyword">:</code><code class="plain">T </code><code class="keyword">=</code> <code class="plain">pair.</code><code class="keyword">_</code><code class="value">1</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="keyword">val</code> <code class="plain">firstString </code><code class="keyword">:</code><code class="plain">Tuple</code><code class="value">2</code><code class="plain">[String,</code><code class="keyword">_</code><code class="plain">] </code><code class="keyword">=</code> <code class="keyword">new</code> <code class="plain">First[String]</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>6</code></td><td class="content"><code class="keyword">val</code> <code class="plain">firstInt </code><code class="keyword">:</code><code class="plain">Tuple</code><code class="value">2</code><code class="plain">[Int,</code><code class="keyword">_</code><code class="plain">] </code><code class="keyword">=</code> <code class="keyword">new</code> <code class="plain">First[Int]</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>8</code></td><td class="content"><code class="keyword">val</code> <code class="plain">name </code><code class="keyword">:</code><code class="plain">String</code><code class="keyword">=</code> <code class="plain">firstString( person )</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>9</code></td><td class="content"><code class="keyword">val</code> <code class="plain">one </code><code class="keyword">:</code><code class="plain">Int </code><code class="keyword">=</code> <code class="plain">firstInt( (</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code> <code class="plain">) )</code></td></tr></tbody></table></div></div></div><p>Ouch! As you may see – writing a function this way is all but neat when it comes to function definition! It’s too much boilerplate code, hiding the essence! Secondly (and more important for our current Quest) as all functions are values, we also need to create an individual instance of that function for every type it should operate on … there’s no escape from it …</p><h3>Function Factories</h3><p>So you may ask, if there’s no escape from always bringing functions into life which always rely on concrete types, are there any other ways to define such kind of type parameterizable functions as we did by implementing trait <em>Function1</em>, but only without all of that boilerplate code? That said, what we’re really looking for is essentially a way to define a function in the following form (no valid Scala code):</p><div id="highlighter_87676" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">first </code><code class="keyword">:</code><code class="plain">Tuple</code><code class="value">2</code><code class="plain">[A,</code><code class="keyword">_</code><code class="plain">] </code><code class="keyword">=</code><code class="plain">&gt; A&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( pair </code><code class="keyword">:</code><code class="plain">Tuple</code><code class="value">2</code><code class="plain">[A,</code><code class="keyword">_</code><code class="plain">] ) </code><code class="keyword">=</code><code class="plain">&gt; pair.</code><code class="keyword">_</code><code class="value">1</code></td></tr></tbody></table></div></div></div><p>As we know, it’s not possible to have an <em>open </em>(unparameterized) type parameter on a function as a first class value (an instance of a concrete, real type). But it turns out, that we could use ordinary methods which are allowed to take type parameters (since they are not values but only members of certain types), as long as a function pops out at the end of the day. Observe:</p><div id="highlighter_812954" class="syntaxhighlighter  "><div class="lines"><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="keyword">def</code> <code class="plain">first[A] </code><code class="keyword">:</code><code class="plain">Tuple</code><code class="value">2</code><code class="plain">[A,</code><code class="keyword">_</code><code class="plain">] </code><code class="keyword">=</code><code class="plain">&gt; A&nbsp; </code><code class="keyword">=</code> <code class="plain">( pair </code><code class="keyword">:</code><code class="plain">Tuple</code><code class="value">2</code><code class="plain">[A,</code><code class="keyword">_</code><code class="plain">] ) </code><code class="keyword">=</code><code class="plain">&gt; pair.</code><code class="keyword">_</code><code class="value">1</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>4</code></td><td class="content"><code class="keyword">val</code> <code class="plain">name </code><code class="keyword">=</code> <code class="plain">first( person )</code></td></tr></tbody></table></div></div></div><p>Now go and take another look at our invalid Scala code again, where we tried to define a polymorphic function. It looks pretty the same, except that the first one is a <em><strong>val</strong></em>ue definition which <em>represents </em>a function, whereas the second (valid) one is a method which <em>produces </em>a function. This is an important distinction! Every time you call that method, it will produce a new function (that is a new instance)!</p><p>So if you take a closer look at line 4, what you see here is a method call which returns a newly created function of type <em>Tuple2[String,Any] =&gt; String</em> (since the compiler kicks in and infers the needed type for applying to <em>person</em>). The delivered function is then applied to person. So although the whole expression looks like an ordinary method call, it’s in fact a method call (to a <em>factory </em>method without any parameter) and a function call which follows afterwards. If we would write that expression twice, we would create two instances of the same function type!</p><p>The fact, that a new function is created, every time you call that method give rise to some worrisome situations. Gaze at the following scenario, where we will fill a given List with a given value in repetitive manner:</p><div id="highlighter_720907" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">def</code> <code class="plain">replicate[T] </code><code class="keyword">:</code> <code class="plain">( Int, T, List[T] ) </code><code class="keyword">=</code><code class="plain">&gt; List[T] </code><code class="keyword">=</code> <code class="plain">{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">( n </code><code class="keyword">:</code><code class="plain">Int, t </code><code class="keyword">:</code><code class="plain">T, list </code><code class="keyword">:</code><code class="plain">List[T] ) </code><code class="keyword">=</code><code class="plain">&gt; {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">( n &lt;</code><code class="keyword">=</code> <code class="value">0</code> <code class="plain">) list </code><code class="keyword">else</code> <code class="plain">t </code><code class="keyword">::</code> <code class="plain">replicate( n-</code><code class="value">1</code><code class="plain">, t, list )</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>7</code></td><td class="content"><code class="keyword">val</code> <code class="plain">ys </code><code class="keyword">:</code> <code class="plain">List[String] </code><code class="keyword">=</code> <code class="plain">replicate( </code><code class="value">4</code><code class="plain">, &amp;quot;y&amp;quot;, Nil ) </code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>8</code></td><td class="content"><code class="keyword">val</code> <code class="plain">ones </code><code class="keyword">:</code> <code class="plain">List[Int] </code><code class="keyword">=</code> <code class="plain">replicate( </code><code class="value">5</code><code class="plain">, </code><code class="value">1</code><code class="plain">, Nil ) </code></td></tr></tbody></table></div></div></div><p>Spotted the sweet spot? This innocent looking function seems to call itself recursively while prepending elements in front of the given list. But it isn’t a recursive call at all! Instead of calling itself, the function calls our method <em>replicate</em>, which in turn produces a new function which then gets called. So for every assumed recursive function call, another function comes into life. Big party time for Carbage Collection!</p><p>In order to avoid that function inflation, especially in conjunction with recursive functions – and because it seems to be still en voque – we could do some outsourcing. Well, sort of. What would happen if we consign all type parameters to the next outer context, like this:</p><div id="highlighter_59298" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="keyword">val</code> <code class="plain">replicate </code><code class="keyword">:</code> <code class="plain">( Int, T, List[T] ) </code><code class="keyword">=</code><code class="plain">&gt; List[T] </code><code class="keyword">=</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>4</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">( n </code><code class="keyword">:</code><code class="plain">Int, t </code><code class="keyword">:</code><code class="plain">T, list </code><code class="keyword">:</code><code class="plain">List[T] ) </code><code class="keyword">=</code><code class="plain">&gt; {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code><code class="plain">( n &lt;</code><code class="keyword">=</code> <code class="value">0</code> <code class="plain">) list </code><code class="keyword">else</code> <code class="plain">t </code><code class="keyword">::</code> <code class="plain">replicate( n-</code><code class="value">1</code><code class="plain">, t, list )</code></td></tr></tbody></table></div></div></div><p>Now our function isn’t anonymous anymore. Look, it’s defined in a polymorphic way without having the compiler to complain! The type parameter is shifted to the surrounding trait. And since the function got a name again, the call to <em>replicate </em>inside the function definition refers to the function itself this time!</p><p>We’re not escaping from the fact, that we need a concrete function value at runtime. So in order to use that function, we need a concrete instance for that trait <em>Lists</em>. In its simplest form, it could look like this:</p><div id="highlighter_627465" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">ones </code><code class="keyword">=</code> <code class="keyword">new</code> <code class="plain">Lists[Int]{}.replicate( </code><code class="value">5</code><code class="plain">, </code><code class="value">1</code><code class="plain">, Nil )</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="keyword">val</code> <code class="plain">ys</code><code class="keyword">=</code> <code class="keyword">new</code> <code class="plain">Lists[String]{}.replicate( </code><code class="value">4</code><code class="plain">, </code><code class="string">"y"</code><code class="plain">, Nil )</code></td></tr></tbody></table></div></div></div><p>That again looks ugly. At least, we could let the compiler do some type inference. Watch out:</p><div id="highlighter_478898" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">def</code> <code class="plain">replicate[T] </code><code class="keyword">=</code> <code class="keyword">new</code> <code class="plain">Lists[T]{}.replicate</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">ys </code><code class="keyword">=</code> <code class="plain">replicate( </code><code class="value">4</code><code class="plain">, </code><code class="string">"y"</code><code class="plain">, Nil )</code></td></tr></tbody></table></div></div></div><p>Ok, that’s nothing else but putting another level of indirection between the function creation and the function call. You have to judge for yourself if it’s feasable for you! In every case, you always have to bear in mind, that a new function is created with every call! Well, if that’s all too much heavy lifting for you, there’s another solution which takes advantage of a mechanism which we already examined in greater detail within the last episode (when it comes to its possible fields of application).</p><h3>Parameterized Methods</h3><p>As you may know, Scala allows us to define parameterized Methods. So the above mentioned functions could also be directly written as a method (as a member of some type):</p><div id="highlighter_700642" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="keyword">def</code> <code class="plain">first[A]( pair </code><code class="keyword">:</code><code class="plain">Tuple</code><code class="value">2</code><code class="plain">[A,</code><code class="keyword">_</code><code class="plain">] </code><code class="keyword">:</code><code class="plain">A </code><code class="keyword">=</code> <code class="plain">pair.</code><code class="keyword">_</code><code class="value">1</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>6</code></td><td class="content"><code class="keyword">val</code> <code class="plain">name </code><code class="keyword">:</code><code class="plain">String</code><code class="keyword">=</code> <code class="plain">Tuples.first( person )</code></td></tr></tbody></table></div></div></div><p>Ok, this time we’ve defined a (type) parameterized method which introduced a type parameter for the pairs first component (as long as we dont care for the type of the second component, we denote it as an existential type). No functions on board, not even function creation – it’s all done within the methods body.</p><p>But, but, but its a … method, not a function! What about all those situations, where we are in need of a real function? For example, what about our beautiful higher order functions, where we might want to pass some other functions! Well, as we’ve already seen, <a href="http://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/" target="_blank">Eta expansion</a> to the rescue! Since Scala is able to <em>coerce </em>a method into a function, it’s ok to kind of simulate polymorphic functions with parameterized methods.</p><h3>Back to the roots</h3><p>Still remember our intial question? We now have some tools at hand on how we could define our <em>filter </em>function as a polymorphic one, allowing us to filter for values of arbitrary type. In doing so, we’ll introduce a type parameter for the type of the List elements. Lets do this in two flavors. First a polymorphic function definition, using <em>outsourcing</em>:</p><div id="highlighter_149622" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="keyword">val</code> <code class="plain">filter </code><code class="keyword">=</code> <code class="plain">( predicate </code><code class="keyword">:</code><code class="plain">T </code><code class="keyword">=</code><code class="plain">&gt; Boolean, xs </code><code class="keyword">:</code><code class="plain">List[T] ) </code><code class="keyword">=</code><code class="plain">&gt; {</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>04</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">( x &lt;- xs; </code><code class="keyword">if</code> <code class="plain">predicate( x ) ) </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content"><code class="keyword">object</code> <code class="plain">IntegerHandler </code><code class="keyword">extends</code> <code class="plain">Filters[Int]{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>10</code></td><td class="content"><code class="keyword">val</code> <code class="plain">positives </code><code class="keyword">:</code> <code class="plain">List[Int] </code><code class="keyword">=</code> <code class="plain">filter( </code><code class="keyword">_</code> <code class="plain">&gt; </code><code class="value">0</code><code class="plain">, List( </code><code class="value">1</code><code class="plain">, -</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, -</code><code class="value">2</code> <code class="plain">) )</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>13</code></td><td class="content"><code class="keyword">class</code> <code class="plain">StringHandler </code><code class="keyword">extends</code> <code class="plain">Object </code><code class="keyword">with</code> <code class="plain">Filters[String]{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>15</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="keyword">val</code> <code class="plain">as </code><code class="keyword">:</code> <code class="plain">List[String] </code><code class="keyword">=</code> <code class="plain">filter( </code><code class="keyword">_</code> <code class="plain">startsWith( </code><code class="string">"A"</code> <code class="plain">), List( </code><code class="string">"Anne"</code><code class="plain">, </code><code class="string">"George"</code> <code class="plain">) )</code></td></tr></tbody></table></div></div></div><p>As you might see, we produce two concrete function instances, each one within a different <em>environment</em> (<em>IntegerHandler </em>and <em>StringHandler</em>), which take care to create a proper instance of that trait our polymorphic function lives in. In both cases, the creation of that trait is bound to the creation of the types instance which refers to the function (so we can ensure that there’s always the same function instance we refer to, at least within <em>IntegerHandler </em>resp<em>.</em>within every instance of <em>StringHandler</em>).</p><p>Finally, let’s see how to define <em>filter </em>as a plain method:</p><div id="highlighter_560891" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">def</code> <code class="plain">filter[T] ( predicate </code><code class="keyword">:</code><code class="plain">T </code><code class="keyword">=</code><code class="plain">&gt; Boolean, xs </code><code class="keyword">:</code><code class="plain">List[T] ) </code><code class="keyword">=</code> <code class="keyword">for</code><code class="plain">( x &lt;- xs; </code><code class="keyword">if</code> <code class="plain">predicate( x ) ) </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>6</code></td><td class="content"><code class="keyword">val</code> <code class="plain">positives </code><code class="keyword">:</code> <code class="plain">List[Int] </code><code class="keyword">=</code> <code class="plain">Filters.filter( </code><code class="keyword">_</code> <code class="plain">&gt; </code><code class="value">0</code><code class="plain">, List( </code><code class="value">1</code><code class="plain">, -</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, -</code><code class="value">2</code> <code class="plain">) )</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>7</code></td><td class="content"><code class="keyword">val</code> <code class="plain">as </code><code class="keyword">:</code> <code class="plain">List[String] </code><code class="keyword">=</code> <code class="plain">Filters.filter( </code><code class="keyword">_</code> <code class="plain">startsWith( </code><code class="string">"A"</code> <code class="plain">), List( </code><code class="string">"Anne"</code><code class="plain">, </code><code class="string">"George"</code> <code class="plain">) )&lt;br /&gt;</code></td></tr></tbody></table></div></div></div><p>Here, both times we’re referring to one and the same method, so <em>filter </em>isn’t a function anymore. Nonetheless, you are also allowed to pass other functions as arguments to a method, making them a kind of higher order method. For some future episodes this will become our natural choice when it comes to define polymorphic functions, although it become very easy (not to say tempting) to alter or refer to state within the methods surrounding type. In this case the quest for staying pure – that is the quest to do functional programming – has become once more a kind of commitment to you as the developer …</p><p>Wow, what a journey. We saw that it’s not possible to directly define polymorphic functions in Scala. Instead there are some <em>work arounds</em> to kind of simulating them. It all comes down to the fact, that a function is a value of a certain Function type, which needs to be type parameterized at runtime, that is all type parameters need to be type parameterized for getting a real value (or instance of that type).</p><p>As long as we don’t care for a type, we could define a function which simply denotes an existential type, which <em>comes down</em> to the most generalized type <em>Any</em>, so that’s the best you can get from such functions. As soon as you want to <em>keep track</em> of a certain type, you need to introduce type parameters. Introducing them by directly giving an implementation for an appropriate Function trait seemed awkward as it produced a lot boilerplate code. To get rid of it, we switched over to methods as function factories with the mentioned problems for recursive function calls. That problem was solved while shifting those type parameters to a surrounding type, but it couldn’t hide the fact that you finally need to create some concrete instances of your functions</p><p>As a last resort, we saw ordinary methods as kind of replacement for polymorphic functions. We don’t need to create an instance of that method first, in order to use them. But in fact the creation is only deferred to the creation of an instance of the surrounding type (the method is a member of). In addition to that, going with methods as functions, there’s always higher risk to introduce impure functions, as methods could refer to the types state (the method is living in) more easily.</p><p>So as a last conclusion, defining polymorphic functions is possible, but the consequences might outweight the benefits. As always, you need to be aware of the given risks and decide for yourself if it’s worth the trade offs (which i hope to have shown to you) for your concrete problem area …
</p><!--adcode--><!--/adcode--></div></div></div><div id="readFooter"><div id="rdb-footer-print">Excerpted from <cite>Functional Scala: Polymorphic Functions ?!? « brain driven development</cite><br>http://gleichmann.wordpress.com/2011/01/23/functional-java-polymorphic-functions/</div><div id="rdb-footer-wrapper"><div id="rdb-footer-left"><a href="http://lab.arc90.com/experiments/readability" id="readability-logo">Readability —&nbsp;</a><a href="http://www.arc90.com/" id="arc90-logo"> An Arc90 Laboratory Experiment&nbsp;</a> <span id="readability-url"> http://lab.arc90.com/experiments/readability</span></div><div id="rdb-footer-right"><a href="http://www.twitter.com/arc90" class="footer-twitterLink">Follow us on Twitter »</a><span class="version">Readability version 1.7.1</span></div></div></div></div></div></body></html>