<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0091)http://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><!--
	generated in 0.468 seconds
	53453 bytes batcached for 300 seconds
--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Functional Scala: Turning Methods into Functions (or WTF is eta expansion?) « brain driven development</title>
<link rel="pingback" href="http://gleichmann.wordpress.com/xmlrpc.php">
<style type="text/css" media="screen"></style>
<link rel="alternate" type="application/rss+xml" title="brain driven development » Feed" href="http://gleichmann.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Comments Feed" href="http://gleichmann.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Functional Scala: Turning Methods into Functions (or WTF is eta expansion?) Comments Feed" href="http://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/feed/">

<link rel="stylesheet" href="./Turning Methods Into Functions_files/global.css" type="text/css">
<link rel="stylesheet" id="sharedaddy-css" href="./Turning Methods Into Functions_files/sharing.css" type="text/css" media="all">



<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gleichmann.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gleichmann.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="brain driven development" href="http://gleichmann.wordpress.com/">
<link rel="prev" title="Merry Christmas – or let it snow with Akka" href="http://gleichmann.wordpress.com/2010/12/19/merry-christmas-or-let-it-snow-with-akka/">
<link rel="next" title="Functional Scala: Polymorphic Functions ?!?" href="http://gleichmann.wordpress.com/2011/01/23/functional-java-polymorphic-functions/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="./Turning Methods Into Functions_files/Turning Methods Into Functions.htm">
<link rel="shortlink" href="http://wp.me/p95ru-7H">
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1250548519g">
	<style type="text/css"></style>
	<link rel="openid.server" href="http://gleichmann.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://gleichmann.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://gleichmann.wordpress.com/osd.xml" title="brain driven development">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
<style type="text/css"></style>
<meta name="application-name" content="brain driven development"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="a development driven blog"><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gleichmann.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico">


<link rel="stylesheet" type="text/css" href="./Turning Methods Into Functions_files/shThemeDefault.css"><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Turning Methods Into Functions_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Turning Methods Into Functions_files/services.css"><script type="text/javascript" src="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.js"></script><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.css" type="text/css" media="screen"><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability-print.css" media="print" type="text/css"></head>

<body class="style-newspaper" id="readabilityBody"><div id="readOverlay" class="style-newspaper"><div id="readTools"><a href="http://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/#" onclick="return window.location.reload()" title="Reload original page" id="reload-page">Reload Original Page</a><a href="http://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/#" onclick="javascript:window.print();" title="Print page" id="print-page">Print Page</a><a href="http://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/#" onclick="readability.emailBox(); return false;" title="Email page" id="email-page">Email Page</a></div><div id="readInner" class="margin-x-narrow size-x-small"><h1>Turning Methods into Functions (or WTF is eta expansion?) « brain driven development</h1><div id="readability-content"><div id="readability-page-1" class="page"><div class=""><p>Welcome back to another episode of Functional Scala!</p><p>First of all, a happy new year to all of you – this year will bring a bunch of new episodes about ‘Functional Scala’ to you, so i hope we’ll grasp a better and better understanding over time on how Scala enables us to write functional code. Again, we’ve only scratched the surface so far – there are far more basic functional concepts (like curried functions, algebraic datatypes, pattern matching, …) to come, before we dig down into some more advanced topis like catamorphisms (sounds cool, eh? But trust me, the idea behind is really simple – you even saw already some examples of it using folds) or type classes and some of their instances (i.e. Functors, Applicatives and even – drum roll – those ubiquitous mentioned <em>‘warm fuzzy things’</em> , ehm i mean Monads).<span id="more-477"></span></p><p>For this episode, we’ll get back into the act really slowly by repeating some stuff of past episodes. We’ll focus on a rather technical aspect of how Scala treats methods when it comes to mix those into the functional game. Let’s repeat some of the core chracteristics for<a href="http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/" target="_blank"> functions</a>: we’ve said that functions are first class values, coming with its own type:</p><div id="highlighter_559907" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">isEven </code><code class="keyword">:</code> <code class="plain">Int </code><code class="keyword">=</code><code class="plain">&gt; Boolean&nbsp;&nbsp; </code><code class="keyword">=</code>&nbsp;&nbsp; <code class="plain">( x </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code><code class="plain">&gt; x </code><code class="keyword">%</code> <code class="value">2</code> <code class="keyword">==</code> <code class="value">0</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">evenNums </code><code class="keyword">=</code> <code class="plain">filter( isEven, List( </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code> <code class="plain">) )</code></td></tr></tbody></table></div></div></div><p>C’mon – this is boring. We already knew that. Yeah, i know! But the one thing i want to re-emphasize is the fact, that every concrete function always boils down to a value of a certain function type (in this case <em>Int =&gt; Boolean</em>). And since a function is a value, it can be <em>assigned </em>to a name (in this case<em> isEven</em>) and passed to another function just as all other ordinary values like Lists or integer values (in this case function <em>isEven </em>is passed to function <em>filter</em>, which qualifies <em>filter </em>to be a so called <a href="http://gleichmann.wordpress.com/2010/11/28/high-higher-higher-order-functions/" target="_blank">Higher Order Function</a>).</p><p>Now – in contrast – take a look at the following method, which looks quite similar to our function <em>isEven</em>:</p><div id="highlighter_448832" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="keyword">def</code> <code class="plain">isPositive( x </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">:</code> <code class="plain">Boolean&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">x &gt; </code><code class="value">0</code></td></tr></tbody></table></div></div></div><p>You may say that method <em>isPositive</em> looks pretty like a normal function: there’s an argument value of type <em>Int</em> which goes in and another value of type <em>Boolean</em> which is returned by the method (similarly, the last expression within the methods body is also the return value of the method). So far for the similarities! But what may be the type of that method? Uhm, while a method is always a member of a certain type (a singleton object in our case), a method itself doesn’t feature its own type at all! Of course you can say that a method features a certain signature (in this case <em>( Int ) Boolean</em> ) which almost looks like a function type (like <em>Int =&gt; Boolean</em>), but you may <a href="http://gleichmann.wordpress.com/2010/11/08/functional-scala-functions-as-objects-as-functions/" target="_blank">remember</a> that this is only syntactic sugar for a Function Trait, e.g. <em>Function1[Int,Boolean]</em>. So in Scala, a function is always a value, represented as an object during runtime which implements a certain Function Trait (while a method isn’t represented as an object in its own right at runtime. It’s rather a member of an object).</p><p>So a method can’t be seen as an autonomous value like a function – but it virtually looks like a Function, if we compare its signature with the type of a function, right? So the enthralling question is, what happens if we try to pass the above mentioned method <em>isPositive</em> to a higher order function, which expects a function of a similar type:</p><div id="highlighter_817167" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code>&nbsp; <code class="plain">filter </code><code class="keyword">=</code> <code class="plain">( predicate </code><code class="keyword">:</code><code class="plain">Int </code><code class="keyword">=</code><code class="plain">&gt; Boolean, xs </code><code class="keyword">:</code><code class="plain">List[Int] )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; {</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(&nbsp; x &lt;- xs;&nbsp; </code><code class="keyword">if</code> <code class="plain">predicate( x )&nbsp; )&nbsp; </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="keyword">val</code> <code class="plain">positiveNums </code><code class="keyword">=</code>&nbsp; <code class="plain">filter( SomeFilters.isPositive, List( </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code> <code class="plain">) )</code></td></tr></tbody></table></div></div></div><p>What have we done? We just called a higher order function <em>filter</em>, which expects a function of type <em>Int =&gt; Boolean</em> and instead of passing a function, we just referred to a method <em>isPositive</em> whose signature <em>( Int ) Boolean</em> looks quite similar!<br>Now guess what’s going to happen if we try to compile and run that piece of code. The compiler will … not complain! Further on, that piece of code will run smoothly and produce an appropriate, compatible result as if we had passed a function instead of a method. But how can that be? We’ve just elaborated lenghty on the fact, that a method is <em>not </em>a function, yet <em>filter </em>clearly expects a function as its first argument! Something really magical must go on behind the scenes … (please act now and imagine some strange melody as in the Thrillers of Edgar Wallace) .</p><p>Well, what’s going to happen behind the scene isn’t that magic at all. In fact it’s so easy that you could do it easily all by yourself. Since we already got all ingredients which we are going to need, let’s think a moment how we could achieve to use that method <em>isPositive </em>for doing all the heavy work (in deciding which integer value may be a positive one). Since all problems in computer science can be solved by addding another level of indirection, what about writing a wrapper function, which in turn delegates to our method?</p><div id="highlighter_616840" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">wrapperFunc </code><code class="keyword">:</code> <code class="plain">Int </code><code class="keyword">=</code><code class="plain">&gt; Boolean&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( x </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code><code class="plain">&gt; SomeFilters.isPositive( x )</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">positiveNums </code><code class="keyword">=</code>&nbsp; <code class="plain">filter( wrapperFunc, List( </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code> <code class="plain">) )</code></td></tr></tbody></table></div></div></div><p>See, this one will work as we explicitly wrap that function around … and isn’t that difficult! Of course, we also could leave that syntactic sugar behind and define the wrapper function by directly implementing the appropriate Function Trait:</p><div id="highlighter_291302" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">wrapperFunc </code><code class="keyword">:</code> <code class="plain">Int </code><code class="keyword">=</code><code class="plain">&gt; Boolean&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="keyword">new</code> <code class="plain">Function</code><code class="value">1</code><code class="plain">[Int,Boolean]{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="keyword">def</code> <code class="plain">apply( x </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code> <code class="plain">SomeFilters.isPositive( x )</code></td></tr></tbody></table></div></div></div><p>Coming from an object oriented background, you now may got a better feeling, since it simply looks like calling the method of an object from inside the method of another object (and in fact, it is!). And this one should be pretty business as usual for all of us. Well, this <em>trick</em> we’ve done <em> </em>(if you’re a fan of design patterns, we could call it the Bridge pattern for bridging some incompatible <em>interfaces</em>) for coercing a method into something where a function is expected, is so easy that even the compiler can detect and do it. In fact, this automatic coercion got an own name – it’s called <em>Eta expansion</em>. As you’ve seen, you could do it by yourself, but since it’s just some boilerplate code, the compiler will take that boring work away from you.</p><p>Of course, the context in which eta expansion takes place has to be unambitious, so the compiler can confidently coerce a method into a function. Let’s take a look at a admittedly somehow contrived example …</p><div id="highlighter_58444" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">def</code> <code class="plain">sum( x </code><code class="keyword">:</code><code class="plain">Int, y </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">:</code> <code class="plain">Int&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">x + y</code></td></tr></tbody></table></div></div></div><p>What we have here is an overloaded method <em>sum</em>. The first one takes no argument and calculates the sum of two fixed integer values, whenever the method gets called. The second one takes two integer values and returns the sum of both. Now take a closer look at <em>sumAsFunction</em>. Since we didn’t annotate any type, type inference kicks in. The compiler tries to resolve the whole expression and infers the type by the resolved value. Unfortunately the compiler ignores our wish to refer to the second method and coerce it into a Function, since this dull compiler simply ignores our name (<em>…AsFunction</em>) where we clearly stated our intention. Instead the compiler asumes by default that it’s simply a call to the first method (while there is no assisting information), hence <em>sumAsFunction </em>refers to a value of 3 which is of type <em>Int</em>.</p><p>Ok – so far so good. But what if we really want to coerce the second method into a function? Well, in this case we have to pitch in for the compiler. There we have two options. The first one is to give an explicit type annotation, so the compiler knows that coercion have to take place:</p><div id="highlighter_675657" class="syntaxhighlighter  "><div class="lines"><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="keyword">val</code> <code class="plain">sumAsFunction </code><code class="keyword">:</code> <code class="plain">( Int, Int ) </code><code class="keyword">=</code><code class="plain">&gt; Int&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">sum</code></td></tr></tbody></table></div></div></div><p>Ahhh, now we force the compiler to do eta expansion, since the simple call of the first method would result in a value of type <em>Int </em>which is clearly in conflict with the stated type for <em>sumAsFunction</em>! So there’s only one chance for the compiler to get out of trouble – that is to coerce the second one into the intended function type.</p><p>Since we’ve <a href="http://gleichmann.wordpress.com/2010/12/05/functional-scala-lambdas-and-other-shortcuts/" target="_blank">already introduced</a> the magical underscore as a jack-of-all-trades while discovering some shortcuts within function definition, he’s again on board if we want to initiate eta expansion more explicitly. So the second option to force the compiler to coerce the second method into a function is to explicitly refering to the methods so called method value, simply by quoting some underscore behind the method name (instead of the methods arguments). Since the method is overloaded, we have to give the compiler some more hints, so the compiler can be absolutely sure we like to refer to the second method. That’s done by quoting an underscore for each unapplied argument (accompanied by the arguments type) :</p><div id="highlighter_913081" class="syntaxhighlighter  "><div class="lines"><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="keyword">val</code> <code class="plain">sumAsFunction </code><code class="keyword">=</code> <code class="plain">sum ( </code><code class="keyword">_</code> <code class="keyword">:</code><code class="plain">Int, </code><code class="keyword">_</code> <code class="keyword">:</code><code class="plain">Int )</code></td></tr></tbody></table></div></div></div><p>Again, since we explicitly refer to the method value (you can think of getting a reference to the method itself, instead of the result value of a method), eta expansion kicks in and leaves a function of type <em>( Int, Int ) =&gt; Int</em>, which the compiler derives from the method signature. Hence <em>sumAsFunction </em>is of our intended function type – hooray!</p><h3>Summary</h3><p>In this episode, we discovered on how to mix methods into the functional game. We’ve seen two options for mostly automatically coercing methods into functions. The first one is to refer to a method by simply stating the methods name without its argument list (which would be a simple method call) wherever a function is expected. In this case the compiler will implicitly performing eta expansion. A more explicit form is represented by the second option, where we apply the underscore after the methods name (instead of the methods argument list). In this case we explicitly refer to the so called method value.</p><p>Either way, you have to be prepared for some pitfalls. Since methods belong to objects, and objects typically offer some state which may be refered or manipulated by the objects methods, you may coerce methods into impure functions!</p><p>Either way, with eta expansion you now have another cool word within your glossary, with which you can impress your team mates … Fun aside – with eta expansion absorbed into your mental model, you now are able to expand the space of possible function candidates at your hands. As we will see in a further episode, methods are the only way to come close to what is called polymorphic functions (together with eta expansion).</p><p>Either way, it’s an easy way to use methods and functions interchangeably whenever functions are needed (and may be one of the main factors why so many people confuse functions with methods, e.g. refering to methods as functions).
</p><!--adcode--><!--/adcode--></div></div></div><div id="readFooter"><div id="rdb-footer-print">Excerpted from <cite>Functional Scala: Turning Methods into Functions (or WTF is eta expansion?) « brain driven development</cite><br>http://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/</div><div id="rdb-footer-wrapper"><div id="rdb-footer-left"><a href="http://lab.arc90.com/experiments/readability" id="readability-logo">Readability —&nbsp;</a><a href="http://www.arc90.com/" id="arc90-logo"> An Arc90 Laboratory Experiment&nbsp;</a> <span id="readability-url"> http://lab.arc90.com/experiments/readability</span></div><div id="rdb-footer-right"><a href="http://www.twitter.com/arc90" class="footer-twitterLink">Follow us on Twitter »</a><span class="version">Readability version 1.7.1</span></div></div></div></div></div></body></html>