<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0089)http://gleichmann.wordpress.com/2010/11/21/functional-scala-comprehending-comprehensions/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Functional Scala: Comprehending Comprehensions « brain driven development</title>
<link rel="pingback" href="http://gleichmann.wordpress.com/xmlrpc.php">
<style type="text/css" media="screen"></style>
<link rel="alternate" type="application/rss+xml" title="brain driven development » Feed" href="http://gleichmann.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Comments Feed" href="http://gleichmann.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Functional Scala: Comprehending Comprehensions Comments Feed" href="http://gleichmann.wordpress.com/2010/11/21/functional-scala-comprehending-comprehensions/feed/">

<link rel="stylesheet" href="./Comprehending Comprehensions_files/global.css" type="text/css">
<link rel="stylesheet" id="sharedaddy-css" href="./Comprehending Comprehensions_files/sharing.css" type="text/css" media="all">



<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gleichmann.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gleichmann.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="brain driven development" href="http://gleichmann.wordpress.com/">
<link rel="prev" title="Functional Scala: Closures" href="http://gleichmann.wordpress.com/2010/11/15/functional-scala-closures/">
<link rel="next" title="Functional Scala: High, Higher, Higher Order Functions" href="http://gleichmann.wordpress.com/2010/11/28/high-higher-higher-order-functions/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="./Comprehending Comprehensions_files/Comprehending Comprehensions.htm">
<link rel="shortlink" href="http://wp.me/p95ru-68">
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1293299642g" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1293299642g" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1293299650g">
	<style type="text/css"></style>
	<link rel="openid.server" href="http://gleichmann.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://gleichmann.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://gleichmann.wordpress.com/osd.xml" title="brain driven development">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
<style type="text/css"></style>
<meta name="application-name" content="brain driven development"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="a development driven blog"><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gleichmann.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico">


<link rel="stylesheet" type="text/css" href="./Comprehending Comprehensions_files/shThemeDefault.css"><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Comprehending Comprehensions_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Comprehending Comprehensions_files/services.css"><script type="text/javascript" src="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.js"></script><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.css" type="text/css" media="screen"><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability-print.css" media="print" type="text/css"></head>

<body class="style-newspaper" id="readabilityBody"><div id="readOverlay" class="style-newspaper"><div id="readTools"><a href="http://gleichmann.wordpress.com/2010/11/21/functional-scala-comprehending-comprehensions/#" onclick="return window.location.reload()" title="Reload original page" id="reload-page">Reload Original Page</a><a href="http://gleichmann.wordpress.com/2010/11/21/functional-scala-comprehending-comprehensions/#" onclick="javascript:window.print();" title="Print page" id="print-page">Print Page</a><a href="http://gleichmann.wordpress.com/2010/11/21/functional-scala-comprehending-comprehensions/#" onclick="readability.emailBox(); return false;" title="Email page" id="email-page">Email Page</a></div><div id="readInner" class="margin-x-narrow size-x-small"><h1>Comprehending Comprehensions « brain driven development</h1><div id="readability-content"><div id="readability-page-1" class="page"><div class=""><p>Welcome to the fifth episode of Functional Scala!</p><p>Have you ever heard about <a href="http://en.wikipedia.org/wiki/Set-builder_notation" target="_blank">set comprehensions</a>? Well, if you ever took a course in mathematics, you surely have. But don’t fear if not! It’s simply a mathematical notation for specifying a set of elements by stating the properties that its members must statisfy. If this sounds too abstract to you, let’s take a look at some simple examples:</p><blockquote><p>{&nbsp; x&nbsp; |&nbsp; x ∈ N&nbsp; :&nbsp; x == x²&nbsp; }<span id="more-380"></span></p></blockquote><p>What we have here is a description for a set of values, coming from the domain of natural numbers, whose square value needs to be equal to the value itself. If you think hard, you’ll discover quickly, that there are only two natural numbers which statisfy the given constraint. So the above given set comprehension is a specification for the set {0, 1}. Nice, isn’t it? I know it’s not, since the set comprehension takes more space than writing down the set directly! Well, there might be cases, for which enumerating the whole set of elements may take some more time and space than using a set comprehension. Take a look at this one:</p><blockquote><p>{&nbsp; x&nbsp; |&nbsp; x ∈ R&nbsp; :&nbsp; x &gt; 0&nbsp; }</p></blockquote><p>Yep, it’s the set of all positive real numbers. Now, have a nice time in writing down this set directly – may would take some space … Ok, that’s all fine and good. But what’s that all to do with Functional Programming in general and Scala in particular? Well, it turns out that most Functional Languages provide a form of so called <a href="http://en.wikipedia.org/wiki/List_comprehension" target="_blank">list comprehensions</a> in one or the other way. In contrast to a set comprehension, you don’t specify the elements of a set but instead of a … list.</p><p>So let’s get back to another example and see how we can express this one as a comprehension within Scala. Let’s try to specify a list of the first five square values.&nbsp; For the last time, we’re gonna express it firstly as a set comprehension:</p><blockquote><p>{&nbsp; x²&nbsp; |&nbsp; x ∈ N&nbsp; :&nbsp; x &gt; 0&nbsp; ∧&nbsp; x &lt; 6 }</p></blockquote><p>Before we translate this one into a list comprehension in Scala, we may take a closer look at the different elements of a comprehension. What you see before the pipe is called the output function, with output variable <em>x</em>. The output function determines how to calculate the values of the resulting list.&nbsp;Behind the pipe you see a input set which prescribes the domain for the output variable, followed by some constraints which may further limit the given domain. It’s typically a set of constraints which must hold for every element that is considered a valid value for&nbsp;<em> </em>the output variable.</p><p>I have to admit that i’ve cheated in the last section. Just once more, i will give you another transformed version of the above set comprehension. But bear with me, it’s only for the sake of a simpler entrance into Scala’s flavour of comprehensions:</p><blockquote><p>{&nbsp; x²&nbsp; |&nbsp; x ∈ { 1 .. 5 } }</p></blockquote><p>Ahh, see that some of the above constraints aren’t needed, if we use another set for characterizing the domain for our output variable? Under this point of view you might say that a comprehension is a specification for building a more specific set out of a more general set. Ok, that’s enough for building our first comprehension in Scala. You might wanna try to recognize the predefined elements of a comprehension. Let’s go …</p><div id="highlighter_689465" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">for</code><code class="plain">(&nbsp; x&nbsp; &lt;-&nbsp; ( </code><code class="value">1</code> <code class="plain">to </code><code class="value">5</code> <code class="plain">)&nbsp; ) </code><code class="keyword">yield</code> <code class="plain">x*x</code></td></tr></tbody></table></div></div></div><p>I don’t cheated again, honestly! What might look like a for-loop at first sight, is a perfectly pure comprehension! Only the notation for the different elements might seem a little odd at first: clearly, <em>x</em> is our output variable. It’s denoted as the first element within the for-block, followed by the input domain for x. The correlation between the output variable and its input domain is expressed by this arrow between them, connecting both elements to each other. In our case, the input domain is build by that <a href="http://www.scala-lang.org/api/2.7.7/scala/Range.html" target="_blank">range</a> <em>( 1 to 5 )</em> and is commonly called a <em>Generator </em>in Scala. In fact, every type which provides a method <em>map </em>(in the sense of a <a href="http://en.wikibooks.org/wiki/Haskell/Applicative_Functors" target="_blank">Functor</a>, which we’ll investigate in a further episode), a method <em>flatMap </em>(in the sense of a <a href="http://james-iry.blogspot.com/2007/09/monads-are-elephants-part-1.html" target="_blank">Monad</a>) and a method <em>filter </em>is able to act as a Generator within a list comprehension!<br>Input domain? Check! Output variable? Check! But where’s our output function which determines the shape of the resulting list? I think you’ve already seen that it’s the last part of the comprehension, following that <em>yield</em>. The output function is in fact responsible for what is yielded back as the result of the whole comprehension expression.</p><h2>Multiple Generators</h2><p>And it gets even better. Concerning output variables and its correlated Generators, you’re not restricted to just one. You’re allowed to bring as many output variables (and its related Generators) into the game as you want.&nbsp; For example, we could produce a cartesian product of all pairs in the range upto three like so:</p><div id="highlighter_683940" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">for</code><code class="plain">(&nbsp; x &lt;- (</code><code class="value">1</code> <code class="plain">to </code><code class="value">3</code> <code class="plain">);&nbsp; y &lt;- (</code><code class="value">1</code> <code class="plain">to </code><code class="value">3</code><code class="plain">)&nbsp; ) </code><code class="keyword">yield</code> <code class="plain">(x,y)&nbsp;&nbsp;&nbsp; </code></td></tr></tbody></table></div></div></div><p>And now spot the order in which the output variables are running through all possible combinations? Aye, it’s from left to right: before the first generator (for <em>x</em>, on the left) <em>steps </em>from one value to the next one<em> </em>, the following generator’s just running through its whole domain once. And that’s again for the next value of <em>x</em> and so on and so forth. For better comprehension, you may think in fact of two nested for-loops: the first generator’s working at the outer<em> loop</em>, while the following generator’s running at the inner <em>loop </em>…</p><p>Ahh, ok – and what if i want to retain only one of those pairs whose values are actually only switched in position, like (1,3) and (3,1)? No problem, mate! It turns out that you’re allowed to refer to a output variable which was defined by a previous generator (so to say within an outer <em>loop</em>). In this case, we simply refer to the current <em>x</em> within the range definition of our second generator:</p><div id="highlighter_294101" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">for</code><code class="plain">(&nbsp; x &lt;- (</code><code class="value">1</code> <code class="plain">to </code><code class="value">3</code> <code class="plain">);&nbsp; y &lt;- (</code><code class="value">1</code> <code class="plain">to x)&nbsp; ) </code><code class="keyword">yield</code> <code class="plain">(x,y)&nbsp;&nbsp;&nbsp; </code></td></tr></tbody></table></div></div></div><p>And while you’re able to refer to the (intermediate) <em>results </em>of a previous generator within a following one, you can do quite some funny things to lists, since lists might act as generators, too. For example, think about a list of lists, each sublist containing some integer values. Let’s say we want to flatten that list of integer lists, so the result is one single list, containing all the integer values of all sublists. Yep, its easily achivable by leveraging comprehensions:</p><div id="highlighter_830495" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">flatten&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( xss </code><code class="keyword">:</code><code class="plain">List[List[Int]] )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; </code><code class="keyword">for</code><code class="plain">(&nbsp; xs &lt;- xss;&nbsp; x &lt;- xs&nbsp; )&nbsp; </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div></div></div><p>Uh, oh, that’s all? Exactly, it’s simple as that! We’ve constructed a new list out of a given list of lists just by <em>unpacking </em>the lists: while the first output variable is <em>traversing </em>all sublists of the given list, the second generator refers to them and reveals the content of that sublists, which is in turn yielded by the output function.</p><h2>Guards</h2><p>So far, we’ve only created some comprehensions which were running through all elements of the given input domains (that is all values which were produced by the given generators). Looking back at set comprehensions, we’ve already seen that it’s possible to declare some constraints in order to filter the possible valid values for a output variable. It turns out, that Scala allows for so called Guards within a comprehension. It’s pretty the same, as guards also representing a set of predicates which must hold for all valid values of an output variable.</p><p>For a first example, let’s say we want to create a list of all natural factors for a given integer value. What might be the input domain? Well, how about all natural numbers between one and the value for which we want to calculate its factors? Ok, but they’re surely not all a natural factor for the given integer value (unless we restrict our function to the values of 1 and 2). Only those numbers are accepted as a factor, if we can divide the given value by that number without a remainder. Hm, looks like a reasonable constraint! So let’s write it down:</p><div id="highlighter_554867" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">factors&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( n </code><code class="keyword">:</code><code class="plain">Int )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; </code><code class="keyword">for</code><code class="plain">(&nbsp; x &lt;- ( </code><code class="value">1</code> <code class="plain">to n );&nbsp; </code><code class="keyword">if</code> <code class="plain">n </code><code class="keyword">%</code> <code class="plain">x </code><code class="keyword">==</code> <code class="value">0</code> <code class="plain">)&nbsp; </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div></div></div><p>As you can see, the guard’s simply declared right after the generator.&nbsp; Of course, you’re not restricted to one single guard. You’re allowed to add as many guards as needed (each separated by a semicolon) – just keep in mind that the predicates of all guards must hold for a value in order to be considered a valid output variable.&nbsp; For better absorbability, here’s another example, which filters all primes within a list of integer values:</p><div id="highlighter_915801" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="keyword">val</code> <code class="plain">primes&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( xs </code><code class="keyword">:</code><code class="plain">List[Int] )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>04</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">allfactors </code><code class="keyword">=</code> <code class="plain">factors( x );</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code>&nbsp; <code class="plain">allFactors.length </code><code class="keyword">==</code> <code class="value">2</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>06</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code>&nbsp; <code class="plain">allFactors(</code><code class="value">0</code><code class="plain">) </code><code class="keyword">==</code> <code class="value">1</code><code class="plain">;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="plain">primes( List(</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code><code class="plain">, </code><code class="value">11</code><code class="plain">, </code><code class="value">12</code><code class="plain">) )&nbsp;&nbsp; </code></td></tr></tbody></table></div></div></div><p>Ok, in order to decide which integer value qualifies as an output variable, we simply have to examine all its factors. If there are only two factors and if these two factors are 1 and the number itself, we have a prime. Sure, sure, but what about that local value <em>allFactors</em>? Well that’s another feature of Scalas comprehension notation. You can place as many local values as you want and refer to them afterwards, even within generators which may follow!</p><p>Putting all pieces together, let’s bring this episode to a close with a somewhat more complex example, which shows another use case of Scalas comprehension mechanism. Imagine a set of companies and another set of employees whithin the following scenario. For this, we’re gonna define two case classes (again, we’ll have a closer look at case classes when it comes to algebraic datatypes) <em>Company </em>and <em>Employee </em>and create a list of companies and another list holding some employees:</p><div id="highlighter_273707" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="keyword">case</code> <code class="keyword">class</code> <code class="plain">Company( </code><code class="keyword">val</code> <code class="plain">name </code><code class="keyword">:</code><code class="plain">String, </code><code class="keyword">val</code> <code class="plain">region </code><code class="keyword">:</code><code class="plain">String, </code><code class="keyword">val</code> <code class="plain">avgSalary </code><code class="keyword">:</code><code class="plain">Int )</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content"><code class="keyword">case</code> <code class="keyword">class</code> <code class="plain">Employee( </code><code class="keyword">val</code> <code class="plain">name </code><code class="keyword">:</code><code class="plain">String, </code><code class="keyword">val</code> <code class="plain">companyName </code><code class="keyword">:</code><code class="plain">String, </code><code class="keyword">val</code> <code class="plain">age </code><code class="keyword">:</code><code class="plain">Int )</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>06</code></td><td class="content"><code class="keyword">val</code> <code class="plain">companies </code><code class="keyword">=</code> <code class="plain">List( Company( </code><code class="string">"SAL"</code><code class="plain">, </code><code class="string">"HE"</code><code class="plain">, </code><code class="value">2000</code> <code class="plain">),</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>07</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Company( </code><code class="string">"GOK"</code><code class="plain">, </code><code class="string">"DA"</code><code class="plain">, </code><code class="value">2500</code> <code class="plain">),</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Company( </code><code class="string">"MIK"</code><code class="plain">, </code><code class="string">"DA"</code><code class="plain">, </code><code class="value">3000</code> <code class="plain">) )</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>10</code></td><td class="content"><code class="keyword">val</code> <code class="plain">employees </code><code class="keyword">=</code> <code class="plain">List( Employee( </code><code class="string">"Joana"</code><code class="plain">, </code><code class="string">"GOK"</code><code class="plain">, </code><code class="value">20</code> <code class="plain">),</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Employee( </code><code class="string">"Mikey"</code><code class="plain">, </code><code class="string">"MIK"</code><code class="plain">, </code><code class="value">31</code> <code class="plain">),</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>12</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Employee( </code><code class="string">"Susan"</code><code class="plain">, </code><code class="string">"MIK"</code><code class="plain">, </code><code class="value">27</code> <code class="plain">),</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>13</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Employee( </code><code class="string">"Frank"</code><code class="plain">, </code><code class="string">"GOK"</code><code class="plain">, </code><code class="value">28</code> <code class="plain">),</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>14</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Employee( </code><code class="string">"Ellen"</code><code class="plain">, </code><code class="string">"SAL"</code><code class="plain">, </code><code class="value">29</code> <code class="plain">) )</code></td></tr></tbody></table></div></div></div><p>Now we are interested in all employees which are statisfying all of the following constraints:</p><ul>
<li>only employees with age greater than 25</li>
<li>only employees working for a company in region “DA”</li>
<li>only employees with a higher salary than the average salary of the company she’s working for (given a salary which is calculated by the employees age times 100)</li>
</ul><p>For all detected employees, we’re interested in the employees name, the name of the company she’s working for and the amount which she’s above the average salary of the company. Uhm, em, well … wait a minute. Does this scenario ring a bell? If you’re familiar with relational databases and Structured Query Language, you surely would have solved that little brainteeser in a blink. Ok, just pretend that our two lists of employees and companies were read from a database and know selection takes place <em>programatically </em>afterwards. But how to retrieve the desired employees? Hmm, maybe by leveraging comprehensions? Wow, not bad – how did you hit on that? In fact, you can see a comprehension as a kind of <em>Query</em>, which also features a select clause (the output function), a from clause (the input domains) and a where clause (the guards). So without any further ado, let’s take all the stuff we’ve learned so far and try to express our Query as a comprehension:</p><div id="highlighter_164262" class="syntaxhighlighter  "><div class="lines"><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">c.name </code><code class="keyword">==</code> <code class="plain">e.companyName;</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>09</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">c.avgSalary &lt; salary</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">yield</code> <code class="plain">( e.name, c.name, salary - c.avgSalary )</code></td></tr></tbody></table></div></div></div><p>Wow, isn’t that magic? You’re right, no magic! It’s simply comprehensions applied to a special problem of querying. But if you look at it that way, you can pretty easily compare the individual parts to a well known Query. There’s even a counterpart to an inner join. Can you see it? Right, there at line 8, where we <em>correlate </em>the companies name between the company and the employee.</p><h2>Summary</h2><p>Puh, what a journey! If you’ve seen Scala’s for-notation as a better loop so far, i hope that you’ve gained a slightly other view on things now. As we said at the very beginning of this episode, it’s rather a mechanism for deriving some specific data based on some more general data. And again, there’s no mutable data in that game. Only some values which are going inside the comprehension and some other values which are going out as the result of the comprehension. Does this remind you on some basic principles within the world of Functional Programming … ?
</p><!--adcode--><!--/adcode--></div></div></div><div id="readFooter"><div id="rdb-footer-print">Excerpted from <cite>Functional Scala: Comprehending Comprehensions « brain driven development</cite><br>http://gleichmann.wordpress.com/2010/11/21/functional-scala-comprehending-comprehensions/</div><div id="rdb-footer-wrapper"><div id="rdb-footer-left"><a href="http://lab.arc90.com/experiments/readability" id="readability-logo">Readability —&nbsp;</a><a href="http://www.arc90.com/" id="arc90-logo"> An Arc90 Laboratory Experiment&nbsp;</a> <span id="readability-url"> http://lab.arc90.com/experiments/readability</span></div><div id="rdb-footer-right"><a href="http://www.twitter.com/arc90" class="footer-twitterLink">Follow us on Twitter »</a><span class="version">Readability version 1.7.1</span></div></div></div></div></div></body></html>