<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0078)http://gleichmann.wordpress.com/2010/11/28/high-higher-higher-order-functions/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><!--
	generated in 0.506 seconds
	51909 bytes batcached for 300 seconds
--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Functional Scala: High, Higher, Higher Order Functions « brain driven development</title>
<link rel="pingback" href="http://gleichmann.wordpress.com/xmlrpc.php">
<style type="text/css" media="screen"></style>
<link rel="alternate" type="application/rss+xml" title="brain driven development » Feed" href="http://gleichmann.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Comments Feed" href="http://gleichmann.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Functional Scala: High, Higher, Higher Order Functions Comments Feed" href="http://gleichmann.wordpress.com/2010/11/28/high-higher-higher-order-functions/feed/">

<link rel="stylesheet" href="./Functional Scala_ High, Higher, Higher Order Functions_files/global.css" type="text/css">
<link rel="stylesheet" id="sharedaddy-css" href="./Functional Scala_ High, Higher, Higher Order Functions_files/sharing.css" type="text/css" media="all">



<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gleichmann.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gleichmann.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="brain driven development" href="http://gleichmann.wordpress.com/">
<link rel="prev" title="Functional Scala: Comprehending Comprehensions" href="http://gleichmann.wordpress.com/2010/11/21/functional-scala-comprehending-comprehensions/">
<link rel="next" title="Functional Scala: Lambdas and other shortcuts" href="http://gleichmann.wordpress.com/2010/12/05/functional-scala-lambdas-and-other-shortcuts/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="./Functional Scala_ High, Higher, Higher Order Functions_files/Functional Scala_ High, Higher, Higher Order Functions.htm">
<link rel="shortlink" href="http://wp.me/p95ru-60">
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1293299695g" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1293299695g" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1293299705g">
	<style type="text/css"></style>
	<link rel="openid.server" href="http://gleichmann.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://gleichmann.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://gleichmann.wordpress.com/osd.xml" title="brain driven development">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
<style type="text/css"></style>
<meta name="application-name" content="brain driven development"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="a development driven blog"><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gleichmann.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico">


<link rel="stylesheet" type="text/css" href="./Functional Scala_ High, Higher, Higher Order Functions_files/shThemeDefault.css"><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Functional Scala_ High, Higher, Higher Order Functions_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Functional Scala_ High, Higher, Higher Order Functions_files/services.css"><script type="text/javascript" src="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.js"></script><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.css" type="text/css" media="screen"><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability-print.css" media="print" type="text/css"></head>

<body class="style-newspaper" id="readabilityBody"><div id="readOverlay" class="style-newspaper"><div id="readTools"><a href="http://gleichmann.wordpress.com/2010/11/28/high-higher-higher-order-functions/#" onclick="return window.location.reload()" title="Reload original page" id="reload-page">Reload Original Page</a><a href="http://gleichmann.wordpress.com/2010/11/28/high-higher-higher-order-functions/#" onclick="javascript:window.print();" title="Print page" id="print-page">Print Page</a><a href="http://gleichmann.wordpress.com/2010/11/28/high-higher-higher-order-functions/#" onclick="readability.emailBox(); return false;" title="Email page" id="email-page">Email Page</a></div><div id="readInner" class="margin-x-narrow size-x-small"><h1>High, Higher, Higher Order Functions « brain driven development</h1><div id="readability-content"><div id="readability-page-1" class="page"><div class=""><p>Welcome to the sixth episode of Functional Scala!</p><p>This time, we’ll finally dive into one of the most powerful concepts i consistently referred to again and again within almost every previous part of this series: Higher Order Functions. Isn’t that cool? I know it’s not, since a cool name alone can’t set you on fire. I will demonstrate you some of its <em>coolness </em>and show you some essential aspects which induce not few voices to accuse Higher Order Functions as one of the basic principles for elegance, compactness and efficiency in Functional Programming.</p><p>So what’s a Higher Order Function then? Is there some meta-magic in it or why they are called higher ordered? Let’s develop a sense for them by firstly focusing on a common problem: Duplication of code. Let’s start by writing a simple Function which can be applied to a list of integer values, resulting into another filtered list, containing only all even values of the incoming list:<span id="more-372"></span></p><div id="highlighter_461498" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">filterEven&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( xs </code><code class="keyword">:</code><code class="plain">List[Int] )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt; {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(&nbsp; x &lt;- xs; &nbsp; </code><code class="keyword">if</code> <code class="plain">x </code><code class="keyword">%</code> <code class="value">2</code> <code class="keyword">==</code> <code class="value">0</code>&nbsp; <code class="plain">)&nbsp; </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div></div></div><p>So here you have it. A simple function, accepting a list of integer values which is then used as a generator within a comprehension. How lovely, since we already covered Scala’s modell of comprehensions within the<a href="http://gleichmann.wordpress.com/2010/11/21/functional-scala-comprehending-comprehensions/" target="_blank"> last episode</a>, we shouldn’t have any problems to understand what’s going on here:&nbsp; While we’re <em>running </em>through all possible values for output variable <em>x</em> (coming from the generator), the given Guard will only pass such values to the output function, which will satisfy the given predicate. And the predicate <em>x % 2 == 0</em> is only met by – tadaaa – even numbers.</p><p>Just for the records: the critical part for detecting all proper values which will be selected for the resulting list, seems to be the predicate which is used by that guard. The other stuff around it is just the mechanical armamentarium which will filter the good ones from the bad ones, but the crucial decision is been made by the predicate. In order to emphasize its exceptional position in this game, we could extract the predicate and put it into a function of its own:</p><div id="highlighter_242273" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">filterEven&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( xs </code><code class="keyword">:</code><code class="plain">List[Int] )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">val</code> <code class="plain">even&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( x </code><code class="keyword">:</code><code class="plain">Int )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; x </code><code class="keyword">%</code> <code class="value">2</code> <code class="keyword">==</code> <code class="value">0</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(&nbsp; x &lt;- xs;&nbsp; </code><code class="keyword">if</code> <code class="plain">even( x )&nbsp; )&nbsp; </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div></div></div><p>So far, nothing really exciting happened. We’ve only extracted the predicate and defined it within a local function (we’ve already seen local functions while we’ve focussed on <a href="http://gleichmann.wordpress.com/2010/11/15/functional-scala-closures/" target="_blank">Closures</a>), so we can refer to that local function afterwards within the comprehension’s guard. Again, since the comprehension expression is the last one within the function, the value of that expression is automatically the result of the whole function: it’s simply the filtered list, yielded by the comprehension.</p><p>Ok, just for fun – let’s filter a list of integer values again, but now retain all odd values of the incoming list. Since we have some experience now in writing filtering functions and it’s a real pleasurable exercise to write some more filters, this one should be business as usual and written down before i can say ‘Bob’s your uncle’:</p><div id="highlighter_510532" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code>&nbsp; <code class="plain">filterOdd </code><code class="keyword">=</code> <code class="plain">( xs </code><code class="keyword">:</code><code class="plain">List[Int] )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">val</code> <code class="plain">odd&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( x </code><code class="keyword">:</code><code class="plain">Int )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; x </code><code class="keyword">%</code> <code class="value">2</code> <code class="keyword">==</code> <code class="value">1</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(&nbsp; x &lt;- xs;&nbsp; </code><code class="keyword">if</code> <code class="plain">odd( x )&nbsp; )&nbsp; </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div></div></div><p>… and ‘Bob’s your uncle’</p><p>Wow, that was fast and really really fun! Ok, now we could write some more filters, e.g. primes, numbers between a certain range, multiples of five, numbers with a certain checksum, fibonacci numbers, natural factors of a certain number …<br>Sounds still funny? Well, it might be for long cold nights, where time’s not going by. But for all others with excellent sleep,&nbsp; is there any way to avoid that repeating task of coming up with that repetitive filtering scaffold again and again? You surely have figured out, that the only thing that’s changing is the predicate for all those different filters. So why not abstract away the task of filtering (the pure act of separating the good ones from the bad ones) on the one side and the task of deciding which are the good ones on the other?</p><p>Too bad that we can’t separate the function which represents the predicate from the rest of the filter…<br>Hey, wait a minute! Didn’t we say that functions are first class values? Yep, <a href="http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/" target="_blank">we did</a>! So they don’t differ from other values? Yep, they differ only in type. Apart from that they are nothing special – just like a value of type <em>Int </em>for example. Then also just like a value of type <em>List[Int]</em>? Exactly! And if we can pass a value of type <em>List[Int]</em> as an argument to our filter function, that means … that means …? Holy grail, you got it! That means you can also pass functions – like our predicate function – as ordinary arguments to a function!</p><p>The only question left is how we declare the predicate function as an additional argument to our filter function? We need to know the precise type of the predicate function. As an intermediate step, we could extend our last function above and annotate the type of the predicate function explicitly:</p><div id="highlighter_867161" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code>&nbsp; <code class="plain">filterOdd </code><code class="keyword">=</code> <code class="plain">( xs </code><code class="keyword">:</code><code class="plain">List[Int] )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">val</code> <code class="plain">odd </code><code class="keyword">:</code> <code class="plain">Int </code><code class="keyword">=</code><code class="plain">&gt; Boolean&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( x </code><code class="keyword">:</code><code class="plain">Int )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; x </code><code class="keyword">%</code> <code class="value">2</code> <code class="keyword">==</code> <code class="value">1</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(&nbsp; x &lt;- xs;&nbsp; </code><code class="keyword">if</code> <code class="plain">odd( x )&nbsp; )&nbsp; </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div></div></div><p>Ahh, as sure as eggs is eggs and as long as our predicate has to decide if a value of type <em>Int </em>qualifies for the resulting list (true) or not (false), our predicate function is of concrete type <em>Int =&gt; Boolean</em>. Now we only <em>transfer </em>that function (with that needed type) as another incoming value to the argument list of our filter function and be done:</p><div id="highlighter_214470" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code>&nbsp; <code class="plain">filter </code><code class="keyword">=</code> <code class="plain">( predicate </code><code class="keyword">:</code><code class="plain">Int </code><code class="keyword">=</code><code class="plain">&gt; Boolean, xs </code><code class="keyword">:</code><code class="plain">List[Int] )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(&nbsp; x &lt;- xs;&nbsp; </code><code class="keyword">if</code> <code class="plain">predicate( x )&nbsp; )&nbsp; </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div></div></div><p>Congratulations, you’ve just created your first Higher Order Function! There’s nothing esoteric about. It’s just a function which is accepting another function as an argument. And while a function maps argument values to a result value (and just in case you’ve forgotten that a function is a value), it’s also completely legal that a function’s result may also be a function. So as soon as a function takes another function as one of its arguments or results into another function, it’s called a Higher Order Function. That’s all, folks!</p><p>You may wonder right now, why there’s all that whoopee about higher order functions. Hold on, we’ve just scratched the surface and only pushed the door open to the manifold fields of application for higher order functions (which we’ll discover in more than one of the following episodes). For now, we’ve just discovered a new tool which will turn out to be very flexible, yet powerful. If McGyver would be a functional programmer, he surely would pick it as one of his favorite tools. And you know what McGyver is able to produce even out of a simple paper-clip …</p><p>What’s left? We’ve successfully encapsulated the pure mechanics for filtering a list of integer values in one single function <em>filter</em>. In doing so, the filter predicate (responsible for the decision which value is kept in the filtered result list) was abstracted away into a function of its own. And while our filter function can now be parameterized with any filter predicate we want, we’re now able to refer to one and the same <em>filter </em>function and use it in multiple ways just by passing different predicate functions:</p><div id="highlighter_945212" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">even </code><code class="keyword">=</code>&nbsp; <code class="plain">( x </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code><code class="plain">&gt; x </code><code class="keyword">%</code> <code class="value">2</code> <code class="keyword">==</code> <code class="value">0</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">odd </code><code class="keyword">=</code>&nbsp; <code class="plain">( x </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code><code class="plain">&gt; x </code><code class="keyword">%</code> <code class="value">2</code> <code class="keyword">==</code> <code class="value">1</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>6</code></td><td class="content"><code class="keyword">val</code> <code class="plain">candidates </code><code class="keyword">=</code> <code class="plain">List( </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code> <code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>8</code></td><td class="content"><code class="keyword">val</code> <code class="plain">evenValues </code><code class="keyword">=</code> <code class="plain">filter( even, candidates )</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>9</code></td><td class="content"><code class="keyword">val</code> <code class="plain">oddValues </code><code class="keyword">=</code> <code class="plain">filter( odd, candidates )</code></td></tr></tbody></table></div></div></div><p>Ok, one last but slightly more complex exercise for today. If you get this one, you’ll surely got all the basic aspects of Higher Order Functions!&nbsp; Let’s write another filter predicate so we’re able to filter a list for primes. We will do so in at least two steps and try to leverage some of the concepts we’ve learned so far within the past episodes. First of all, let’s think about the characteritics for a number to  qualify as a prime. Could we agree on the fact, that there should be no  natural factor between 2 and at least the half of that number? Ok!</p><p>Now, before we get back to the prime predicate, we will write another one which will screen a list for all numbers which may be a natural factor for another, fixed integer number. Under normal conditions, we would write a function which will take two arguments; the first argument may represent an arbitrary number and the second one a possible factor for that number:</p><div id="highlighter_134983" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">isFactor </code><code class="keyword">=</code>&nbsp; <code class="plain">( num</code><code class="keyword">:</code> <code class="plain">Int, factor </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code><code class="plain">&gt; num </code><code class="keyword">%</code> <code class="plain">factor </code><code class="keyword">==</code> <code class="value">0</code></td></tr></tbody></table></div></div></div><p>Too bad that we cannot use that function as a filter predicate since <em>filter </em>asks for a function of type <em>Int =&gt; Boolean</em> (while the above one is of type<em> (Int, Int ) =&gt; Boolean</em>). So if we want to filter a list of integer values for all factors of – say – 1oo, we need to come up with a predicate function like so:</p><div id="highlighter_217184" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">isFactorOfHundred </code><code class="keyword">=</code>&nbsp; <code class="plain">( factor </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code><code class="plain">&gt; </code><code class="value">100</code> <code class="keyword">%</code> <code class="plain">factor </code><code class="keyword">==</code> <code class="value">0</code></td></tr></tbody></table></div></div></div><p>Ok, looks good? Now we want to filter for all factors of 99, then 1000, next 1558, next … Hm, does this sound familiar?&nbsp; Similarly to our <em>filter </em>function, we don’t wanna write a new predicate function for every number we want to filter a list for its factors. Higher Order Functions to the rescue! What about a function which will take just an arbitrary number and result into another function which will again take just another number and test if this one is a factor for the first one? Sounds confusing? All becomes quickly clear, if we look at that function in action:</p><div id="highlighter_942377" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">isFactorOf&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( num </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code><code class="plain">&gt; {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">( factor </code><code class="keyword">:</code><code class="plain">Int ) </code><code class="keyword">=</code><code class="plain">&gt; num </code><code class="keyword">%</code> <code class="plain">factor </code><code class="keyword">==</code> <code class="value">0</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>6</code></td><td class="content"><code class="keyword">val</code> <code class="plain">isFactorOfHundred </code><code class="keyword">=</code> <code class="plain">isFactorOf( </code><code class="value">100</code> <code class="plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>7</code></td><td class="content"><code class="keyword">val</code> <code class="plain">isFactorOfNinetyNine </code><code class="keyword">=</code> <code class="plain">isFactorOf( </code><code class="value">99</code> <code class="plain">)</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>8</code></td><td class="content"><code class="keyword">val</code> <code class="plain">isFactorOfThousand </code><code class="keyword">=</code> <code class="plain">isFactorOf( </code><code class="value">1000</code> <code class="plain">)</code></td></tr></tbody></table></div></div></div><p>Wowowow … hold on! What is that for an artwork? Our function <em>isFactorOf </em>is simply a higher order one: this time because it results into another function. What you see inside its body is simply the definition of another function, which is constructed every time <em>isFactoryOf </em>gets called. And while that function definition is the last expression inside the function body, the value of that expression (that is the function value) is the result of the whole function. At the same time, the resulting function can be called a closure. See why? Well, <em>num </em>is a free variable, since it’s not declared as an argument. In this case, closing over takes place and the free variable gets bound to the argument of the surrounding function. So now we’re able to filter a list of integers for those factors of an arbitrary number:</p><div id="highlighter_508601" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">factorsOfHundred </code><code class="keyword">=</code>&nbsp; <code class="plain">filter( isFactorOf( </code><code class="value">100</code> <code class="plain">), candidates )</code></td></tr></tbody></table></div></div></div><p>Again, nothing really exiting here. We’ve got all ingredients to fully understand what’s going on – only the first argument is of real interest: we applied<em> isFactorOf</em> to the value <em>100 </em>which results into a function, which in turn is taking another integer value and decides if this one is a factor of <em>100</em>. This <em>ad hoc</em> generated function is of type <em>Int =&gt; Boolean</em> and therefore an appropriate predicate function for <em>filter</em>. Now <em>filter </em>will use that predicate function in order to decide which number of the incoming list <em>candidates </em>will made it to the filtered outgoing list.</p><p>With this<em> Predicate Function Maker</em> on board, we can now switch back and concentrate again on our main predicate for filtering primes. Let’s reflect on how our <em>Function Maker</em> might help us for identifying a number as prime. We’ve got already agreement on the fact, that there should be no factor for any given number in the range between 2 and half of that number. Does this ring a bell? How can we check if there’s no factor within a collection of integer values? Well, how about filtering that collection by an appropriate predicate – let’s say only factors of that number? If the filtered list is empty, than there’s obviously no factor for that number within that range. Hence that number must be a prime:</p><div id="highlighter_621116" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">prime </code><code class="keyword">=</code> <code class="plain">( num </code><code class="keyword">:</code><code class="plain">Int )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; num &gt; </code><code class="value">1</code>&nbsp; <code class="plain">&amp;&amp;&nbsp; filter( isFactorOf( num ), (</code><code class="value">2</code> <code class="plain">to num/</code><code class="value">2</code><code class="plain">).toList ).isEmpty</code></td></tr></tbody></table></div></div></div><p>Violá, here’s our predicate function, testing for prime – based on filtering – which in turn can be used for filtering …</p><p>In this episode we’ve discovered the meaning of so called Higher Order Functions. While we focussed mainly on its basic characteristics – functions which accepting other functions or returning functions – i think you’ve already got a little glimpse for their power. In fact, for many computational tasks within the world of functional programming they are indispensable (as we well see). They not only allow for new ways of abstraction (for example resource control – you may have already heard of the so called <em><a href="http://scala.sygneca.com/patterns/loan" target="_blank">Loan pattern</a></em> within Scala), kind of <em>simulating </em>or <em>capturing </em>state (as we will see when looking at difference lists) but also lay the foundation for some other well known, powerful features of functional programming (like currying, as we will also see in some future episode).</p><hr><h3>Addendum</h3><p>Since Scala is a hybrid language which blends object oriented and functional features, Scala’s <em>List </em>type (in fact <em>List </em>is a<em> type constructor</em>, but that’s again a topic for another episode) provides a generic <em>filter method</em> already. That is, if you hold a list of integer values (an object of type <em>List[Int]</em>), you can call a method <em>filter </em>on that object and pass an arbitrary predicate function of type <em>Int =&gt; Boolean</em> (just as we did with our filter function):</p><div id="highlighter_65847" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">val</code> <code class="plain">candidates </code><code class="keyword">=</code> <code class="plain">List( </code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">10</code> <code class="plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">evenValues </code><code class="keyword">=</code> <code class="plain">candidates.filter( even )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>4</code></td><td class="content"><code class="keyword">val</code> <code class="plain">oddValues </code><code class="keyword">=</code> <code class="plain">candidates.filter( odd )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="keyword">val</code> <code class="plain">factorsOfTwelve </code><code class="keyword">=</code> <code class="plain">candidates.filter( isFactorOf( </code><code class="value">12</code> <code class="plain">) )&nbsp; </code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>6</code></td><td class="content"><code class="keyword">val</code> <code class="plain">primes </code><code class="keyword">=</code> <code class="plain">candidates.filter( prime )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></td></tr></tbody></table></div></div></div><p>So if you want, this method could be called a <em>Higher Order Method</em>.
</p><!--adcode--><!--/adcode--></div></div></div><div id="readFooter"><div id="rdb-footer-print">Excerpted from <cite>Functional Scala: High, Higher, Higher Order Functions « brain driven development</cite><br>http://gleichmann.wordpress.com/2010/11/28/high-higher-higher-order-functions/</div><div id="rdb-footer-wrapper"><div id="rdb-footer-left"><a href="http://lab.arc90.com/experiments/readability" id="readability-logo">Readability —&nbsp;</a><a href="http://www.arc90.com/" id="arc90-logo"> An Arc90 Laboratory Experiment&nbsp;</a> <span id="readability-url"> http://lab.arc90.com/experiments/readability</span></div><div id="rdb-footer-right"><a href="http://www.twitter.com/arc90" class="footer-twitterLink">Follow us on Twitter »</a><span class="version">Readability version 1.7.1</span></div></div></div></div></div></body></html>