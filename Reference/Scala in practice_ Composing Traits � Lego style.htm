<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0089)http://gleichmann.wordpress.com/2009/10/21/scala-in-practice-composing-traits-lego-style/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Scala in practice: Composing Traits – Lego style « brain driven development</title>
<link rel="pingback" href="http://gleichmann.wordpress.com/xmlrpc.php">
<style type="text/css" media="screen"></style>
<link rel="alternate" type="application/rss+xml" title="brain driven development » Feed" href="http://gleichmann.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Comments Feed" href="http://gleichmann.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Scala in practice: Composing Traits – Lego style Comments Feed" href="http://gleichmann.wordpress.com/2009/10/21/scala-in-practice-composing-traits-lego-style/feed/">

<link rel="stylesheet" href="./Scala in practice_ Composing Traits – Lego style_files/global.css" type="text/css">
<link rel="stylesheet" id="sharedaddy-css" href="./Scala in practice_ Composing Traits – Lego style_files/sharing.css" type="text/css" media="all">



<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gleichmann.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gleichmann.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="brain driven development" href="http://gleichmann.wordpress.com/">
<link rel="prev" title="Scala Introduction – Slides available" href="http://gleichmann.wordpress.com/2009/10/07/scala-introduction-slides-available/">
<link rel="next" title="Talking about ‘Clean Code’ at Java User Group Mannheim" href="http://gleichmann.wordpress.com/2010/02/22/talking-about-clean-code-at-java-user-group-mannheim/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="./Scala in practice_ Composing Traits – Lego style_files/Scala in practice_ Composing Traits – Lego style.htm">
<link rel="shortlink" href="http://wp.me/p95ru-4j">
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1269039639g">
	<style type="text/css"></style>
	<link rel="openid.server" href="http://gleichmann.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://gleichmann.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://gleichmann.wordpress.com/osd.xml" title="brain driven development">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
<style type="text/css"></style>
<meta name="application-name" content="brain driven development"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="a development driven blog"><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gleichmann.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico">


<link rel="stylesheet" type="text/css" href="./Scala in practice_ Composing Traits – Lego style_files/shThemeDefault.css"><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Scala in practice_ Composing Traits – Lego style_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Scala in practice_ Composing Traits – Lego style_files/services.css"><script type="text/javascript" src="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.js"></script><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.css" type="text/css" media="screen"><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability-print.css" media="print" type="text/css"></head>

<body class="style-newspaper" id="readabilityBody"><div id="readOverlay" class="style-newspaper"><div id="readTools"><a href="http://gleichmann.wordpress.com/2009/10/21/scala-in-practice-composing-traits-lego-style/#" onclick="return window.location.reload()" title="Reload original page" id="reload-page">Reload Original Page</a><a href="http://gleichmann.wordpress.com/2009/10/21/scala-in-practice-composing-traits-lego-style/#" onclick="javascript:window.print();" title="Print page" id="print-page">Print Page</a><a href="http://gleichmann.wordpress.com/2009/10/21/scala-in-practice-composing-traits-lego-style/#" onclick="readability.emailBox(); return false;" title="Email page" id="email-page">Email Page</a></div><div id="readInner" class="margin-x-narrow size-x-small"><h1>Composing Traits – Lego style « brain driven development</h1><div id="readability-content"><div id="readability-page-1" class="page"><div class=""><p>As a kid, i loved to play with Lego bricks, especially to build freaky spacecrafts.</p><p><img class="alignleft size-full wp-image-268" title="spacecraft" src="./Scala in practice_ Composing Traits – Lego style_files/spacecraft.jpg" alt="spacecraft" width="219" height="189">At that time it was easy to let my phantasy go (where noone has gone before) and build completely new models simply by composing some standard bricks. Those bricks weren’t too specialized, meaning that there weren’t too many constraints on how to combine them. On the other side you always had to compose a new spacecraft from the very ground up as there weren’t some more higher organized units like engines or control cabins.</p><p>Nowadays, you’ll find such units. There are engines, control cabins or a whole commando bridge, Wings, Field Generators and so on – a whole set of higher organized units whithin a single domain. On the other side, you can’t combine every unit with an arbitrary other unit within that domain since there are some ‘constraints’&nbsp; that will prohibit some unsound combinations.</p><p>Now you may ask how that cute childhood story relates to Scala?<br>You may have seen already some similarities to the field of software development where you also want to compose some higher organized building blocks within a certain domain, enforcing that they are only combined in a proper way. It turns out, that Scala’s concept of traits provide some mechanisms of ‘mixin’ them together while enforcing the compliance of some constraints. This may sound too abstract at that point, but hold on – we’ll build some spacecrafts in the above mentioned way and things will get clearer.</p><h3>Look, it’s a spacecraft</h3><p>Let’s start with a hull for our spacecraft. To keep things simple and to focus on the core idea of constrained<br>composition, the spacecraft’s hull will only provide one abstract method <em>engange</em> to start the craft:</p><div id="highlighter_605992" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Spacecraft{</code></td></tr></tbody></table></div></div></div><p>As you can see, method <em>engage </em>and therefore the whole class is abstract, so you can’t instantiate a pure hull<br>of a spacecaft. So whenever we want to build a full fledged craft, we may have to ‘add’ (or mix in) a component<br>that knows how to engage that craft.</p><h3>Captains place</h3><p>Typically, a spacecraft possess a kind of ‘control center’ which is normally well suited for initiating the<br>start of a craft, hence should provide an implementation for method engage. There may be different kinds of<br>control centers that could be used for building your own, customized spacecraft – e.g. a whole commando bridge for<br>those big deep space crafts or a small control cabin for those little crafts mainly maneuvering near the orbit.</p><div id="highlighter_308579" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="plain">def engage { </code><code class="keyword">for</code><code class="plain">( _ &lt;- </code><code class="value">1</code> <code class="plain">to </code><code class="value">3</code> <code class="plain">){ speedUp } }</code></td></tr></tbody></table></div></div></div><p>Now we see what it means to engage (a Spacecraft) if composing a commando Bridge to the hull. We simply speed up that craft 3 times.<br>But hold on – although we know what it means to engage that craft, speeding up that craft is not in the responsibility of the commando bridge, since <em>speedUp </em>is left abstract (speeding down is omitted since it follows the same mechanism – you get the idea).</p><h3>Re-calibrating all Dilithium crystals</h3><p>So the spacecraft seems to be incomplete without a unit to speed it up – let’s call such a unit ‘engine’.&nbsp; Again, there may be different kinds of engines we could select from to assemble our craft.<br>Let’s say there is a Pulse-Engine that directly supports the command of speeding up:</p><div id="highlighter_5954" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>7</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">def speedUp { </code><code class="keyword">if</code><code class="plain">( currentPulse &lt; maxPulse ) currentPulse += </code><code class="value">1</code>&nbsp; <code class="plain">}</code></td></tr></tbody></table></div></div></div><p>As you can see, a <em>PulseEngine </em>is able to speed up until a maximum pulse rate. In order to ‘produce’ different pulse engines (supporting different maximum pulse rates for different types of crafts), the field is again left abstract.<br>Now we could create our first spacecraft, using a commando bridge and a pulse engine (let’s say that’s all you need for building a full fledged spacecraft).</p><div id="highlighter_173922" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">class</code> <code class="plain">StarCruiser </code><code class="keyword">extends</code> <code class="plain">Spacecraft with CommandoBridge with PulseEngine{</code></td></tr></tbody></table></div></div></div><p>As you can see, we’ve created a new (Sub-)Type of a spacecraft and mixed in both Traits, obtaining a commando bridge (that knows how to engage the whole craft) and an engine (that knows how to get the craft into speed when engaging the craft).<br>The only thing left is to define the maximum pulse rate our <em>StarCruiser </em>is able to achieve.</p><h3>Wiring</h3><p>In the above case, all units fitted together smoothly. For example, a pulse engine provided exactly the ‘interface’ (<em>speedUp</em>) that was needed by a commando bridge, so you could compose both without additional work. Let’s take a look at another control center, that we could apply to our craft, that may offer an incompatible ‘interface’ :</p><div id="highlighter_639929" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">def engage = increaseSpeed</code></td></tr></tbody></table></div></div></div><p>This time we need to do some additional wiring, if we want to compose a new type of craft using a control cabin and a pulse engine, since both units don’t fit together directly (the dependency needed by <em>ControlCabin </em>(<em>increaseSpeed</em>) isn’t directly fulfilled by <em>PulseEngine</em>)</p><div id="highlighter_415027" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">class</code> <code class="plain">Shuttle </code><code class="keyword">extends</code> <code class="plain">Spacecraft with ControlCabin with PulseEngine{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">def increaseSpeed = speedUp</code></td></tr></tbody></table></div></div></div><p>As you can see, we have to wire together the control cabin with the pulse engine in order to let them cooperate.<br>In the same way, we could think of another kind of engine which offers a completely different ‘interface’:</p><div id="highlighter_375984" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">trait WarpEngine </code><code class="keyword">extends</code> <code class="plain">Engine{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>7</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">def toWarp( x: Int ) { </code><code class="keyword">if</code><code class="plain">( x &lt; maxWarp ) currentWarp = x }</code></td></tr></tbody></table></div></div></div><p>Again, we need to wire together the concrete control center with the <em>WarpEngine</em>, depending on their incompatible ‘interfaces’.</p><p>Let’s compose a craft, using a commando bridge and a warp engine.<br>Firstly, we are forced to define a maximum warp level, since it’s an abstract field of <em>WarpEngine</em>. Secondly we have to wire together the commando bridge with the warp engine, that is to ‘route’ the commando bridge’s method <em>speedUp </em>to the warp engines ‘interface’ <em>toWarp </em>with an appropriate implementation:</p><div id="highlighter_711663" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">class</code> <code class="plain">Explorer </code><code class="keyword">extends</code> <code class="plain">Spacecraft with CommandoBridge with WarpEngine{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">def speedUp = toWarp( currentWarp + </code><code class="value">1</code> <code class="plain">)</code></td></tr></tbody></table></div></div></div><p>Alternatively, we could also use a simple control cabin for another type of spacecraft. Again we have to link the contol cabins commands (<em>increaseSpeed</em>) to the warp engines ‘interface’:</p><div id="highlighter_373330" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">object Defiant </code><code class="keyword">extends</code> <code class="plain">Spacecraft with ControlCabin with WarpEngine{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">def increaseSpeed = toWarp( </code><code class="value">10</code> <code class="plain">) </code></td></tr></tbody></table></div></div></div><h3>Restricted Access</h3><p>Until now, we only applied a control center or engines to spacecrafts. But nothing would restrict us to use those units in other domains so far. Say we want to build a certain airplane and apply a warp engine.</p><div id="highlighter_725219" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">class</code> <code class="plain">Jet </code><code class="keyword">extends</code> <code class="plain">Airplane with WarpEngine{</code></td></tr></tbody></table></div></div></div><p>It’s propably not the best idea to equip a Jet with a warp engine, since this seems to be a bit oversized for an airplane. We need a way to restrict the usage of warp engines – they should be only applied to spacecrafts. Fortunately we can express this kind of constraint, using Scala’s self type annotation. Included within a trait, it’s like saying ‘<em>this trait is only allowed to be mixed into a type of x</em>‘ (in our case ‘<em>Spacecraft</em>‘):</p><div id="highlighter_294560" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">trait WarpEngine </code><code class="keyword">extends</code> <code class="plain">Engine{</code></td></tr></tbody></table></div></div></div><p>As you can see, we used the <em>WarpEngine</em>s self type to restrict its appliance only to spacecrafts. In all other cases, Scala’s compiler will complain about an unsound mixin.</p><h3>What makes a spacecraft a spacecaft ?</h3><p>With selftypes, we now have an instrument to restrict the usage of a trait to be mixed in only to a certain Type.<br>On the other side, we aren’t forced to use a control center or an engine at all if creating a new spacecraft, since we could provide an implementation of the spacecrafts abstract methods directly within a subtype. That may be fine in some cases, but what if we want to state that a spacecraft has to be composed of at least a certain type of control center and a certain type of engine? Again, we can use the service of the self type annotation, this time applied to our abstract class spacecraft, stating that a spacecraft should at least be compound of a control center and an engine:</p><div id="highlighter_837438" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Spacecraft{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">: ControlCenter with Engine =&gt;</code></td></tr></tbody></table></div></div></div><p>The only thing left is to provide an appropriate type <em>ControlCenter </em>resp. <em>Engine </em>and the correct classification of those concrete units (e.g. <em>‘CommandoBridge is a</em> <em>ControlCenter</em>‘)</p><div id="highlighter_221608" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content"><code class="plain">trait CommandoBridge </code><code class="keyword">extends</code> <code class="plain">ControlCenter{ ... }</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content"><code class="plain">trait ControlCabin </code><code class="keyword">extends</code> <code class="plain">ControlCenter{ ... }</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>09</code></td><td class="content"><code class="plain">trait PulseEngine </code><code class="keyword">extends</code> <code class="plain">Engine{ ... }</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="plain">trait WarpEngine </code><code class="keyword">extends</code> <code class="plain">Engine{ ... }</code></td></tr></tbody></table></div></div></div><h3>Summary</h3><p>Abstract methods and self type annotations are two powerful tools which help to guide or constrain the composition of traits.<br>You may use abstract methods and abstract fields to enforce a kind of ‘wiring’ between multiple units or at least to force the definition of some concrete information.<br>You may use a self type annotation to restrict the appliance of a trait, so that it can only be mixed in to a certain type (or subtypes). On the other side, you’re able to enforce that a certain trait (or subtype) have to be mixed in to a certain type, again by using a self type annotation.<br>In all cases, the ‘composer’ of those units will be guided by the compiler – you can’t forget to give a definition for an abstract method or arrange an unsound composition, since all those ‘constraints’ are based on Scala’s statically typed Type system.
</p><!--adcode--><!--/adcode--></div></div></div><div id="readFooter"><div id="rdb-footer-print">Excerpted from <cite>Scala in practice: Composing Traits – Lego style « brain driven development</cite><br>http://gleichmann.wordpress.com/2009/10/21/scala-in-practice-composing-traits-lego-style/</div><div id="rdb-footer-wrapper"><div id="rdb-footer-left"><a href="http://lab.arc90.com/experiments/readability" id="readability-logo">Readability —&nbsp;</a><a href="http://www.arc90.com/" id="arc90-logo"> An Arc90 Laboratory Experiment&nbsp;</a> <span id="readability-url"> http://lab.arc90.com/experiments/readability</span></div><div id="rdb-footer-right"><a href="http://www.twitter.com/arc90" class="footer-twitterLink">Follow us on Twitter »</a><span class="version">Readability version 1.7.1</span></div></div></div></div></div></body></html>