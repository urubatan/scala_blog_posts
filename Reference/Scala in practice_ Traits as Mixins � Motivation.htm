<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0089)http://gleichmann.wordpress.com/2009/07/19/scala-in-practice-traits-as-mixins-motivation/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Scala in practice: Traits as Mixins – Motivation « brain driven development</title>
<link rel="pingback" href="http://gleichmann.wordpress.com/xmlrpc.php">
<style type="text/css" media="screen"></style>
<link rel="alternate" type="application/rss+xml" title="brain driven development » Feed" href="http://gleichmann.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Comments Feed" href="http://gleichmann.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Scala in practice: Traits as Mixins – Motivation Comments Feed" href="http://gleichmann.wordpress.com/2009/07/19/scala-in-practice-traits-as-mixins-motivation/feed/">

<link rel="stylesheet" href="./Scala in practice_ Traits as Mixins – Motivation_files/global.css" type="text/css">
<link rel="stylesheet" id="sharedaddy-css" href="./Scala in practice_ Traits as Mixins – Motivation_files/sharing.css" type="text/css" media="all">



<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gleichmann.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gleichmann.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="brain driven development" href="http://gleichmann.wordpress.com/">
<link rel="prev" title="Talking about Domain Driven Design at XPUG Rhein/Main" href="http://gleichmann.wordpress.com/2009/04/02/talking-about-domain-driven-design-at-xpug-rheinmain/">
<link rel="next" title="Talking about Scala" href="http://gleichmann.wordpress.com/2009/09/21/talking-about-scala/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="./Scala in practice_ Traits as Mixins – Motivation_files/Scala in practice_ Traits as Mixins – Motivation.htm">
<link rel="shortlink" href="http://wp.me/p95ru-3T">
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1250548519g">
	<style type="text/css"></style>
	<link rel="openid.server" href="http://gleichmann.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://gleichmann.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://gleichmann.wordpress.com/osd.xml" title="brain driven development">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
<style type="text/css"></style>
<meta name="application-name" content="brain driven development"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="a development driven blog"><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gleichmann.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico">


<link rel="stylesheet" type="text/css" href="./Scala in practice_ Traits as Mixins – Motivation_files/shThemeDefault.css"><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Scala in practice_ Traits as Mixins – Motivation_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Scala in practice_ Traits as Mixins – Motivation_files/services.css"><script type="text/javascript" src="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.js"></script><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.css" type="text/css" media="screen"><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability-print.css" media="print" type="text/css"></head>

<body class="style-newspaper" id="readabilityBody"><div id="readOverlay" class="style-newspaper"><div id="readTools"><a href="http://gleichmann.wordpress.com/2009/07/19/scala-in-practice-traits-as-mixins-motivation/#" onclick="return window.location.reload()" title="Reload original page" id="reload-page">Reload Original Page</a><a href="http://gleichmann.wordpress.com/2009/07/19/scala-in-practice-traits-as-mixins-motivation/#" onclick="javascript:window.print();" title="Print page" id="print-page">Print Page</a><a href="http://gleichmann.wordpress.com/2009/07/19/scala-in-practice-traits-as-mixins-motivation/#" onclick="readability.emailBox(); return false;" title="Email page" id="email-page">Email Page</a></div><div id="readInner" class="margin-x-narrow size-x-small"><h1>Traits as Mixins – Motivation « brain driven development</h1><div id="readability-content"><div id="readability-page-1" class="page"><div class=""><p>Some voices say that Scala’s type system is rich but complex.<br>Traits are part of Scala’s type system, but their application isn’t that mysterious nor is it incomprehensible.<br>This post will give some introduction to one of their main operational areas – Traits used as Mixins, a well known concept which is already provided by some dynamic languages like Ruby.<span id="more-241"></span></p><h3>Mixins</h3><p>As their name reveals, Traits are usually used to represent a distinct feature or aspect that is normally orthogonal to the responsibility of a concrete type or at least of a certain instance. Therefore, the functionality of a Trait may be required by completely different types that have nothing in common or aren’t even members of the same type hierarchy.</p><p>Let’s say you want to model the ability to sing as such an orthogonal feature: it could be applied to Birds, Persons (well, not all) or even to Radios (c’mon, with just a little bit of imagination).</p><p>In Java, you could come up with an Interface in order to express this ‘trait’:</p><div id="highlighter_976416" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="keyword">public</code> <code class="keyword">interface</code> <code class="plain">Singer{</code></td></tr></tbody></table></div></div></div><p>Now every type which is also a singer may implement this interface and give an appropriate implementation:</p><div id="highlighter_910530" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Bird </code><code class="keyword">implements</code> <code class="plain">Singer{</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content"><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">sing(){ ... }</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>08</code></td><td class="content"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Cicada </code><code class="keyword">extends</code> <code class="plain">Singer{</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>10</code></td><td class="content"><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">sing(){...}</code></td></tr></tbody></table></div></div></div><p>Now all of them (and their subclasses) can be treated as Singers even – as said – a Cicada is not a Bird nor a Radio.<br>If some of them (or all) should sing the same way, you could use ‘copy n paste’ or place a default implementation and use composition. But nevertheless, you have to provide a definition of <em>sing()</em> in every of that classes – if only because to delegate to that implementation.<br>No matter which option you choose, the proportion of boilerplate code isn’t just small (Inheritance may be no option at all, because there may be no common parent class. Particularly, placing <em>sing()</em> into a too general supertype would mean that ALL subtypes would be singers).</p><h3>Mixin’ traits ‘statically’</h3><p>Scala provides an elegant way to define what it means to sing (at least a default implementation) and reuse it quite idependently by separating that feature as a trait and using that trait as a mixin.<br>That said, you can (but don’t have to) provide a definition for some or all methods of that trait and mix that trait into every type you want to:</p><div id="highlighter_652086" class="syntaxhighlighter  "><div class="lines"><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;</code><code class="plain">def sing { println( </code><code class="string">"singing ..."</code> <code class="plain">) }</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>7</code></td><td class="content"><code class="keyword">class</code> <code class="plain">Bird </code><code class="keyword">extends</code> <code class="plain">Singer</code></td></tr></tbody></table></div></div></div><p>As you can see, the class definition of class Bird has mixed trait Singer into it’s own definition using keyword ‘<em>extends</em>‘.<br>Now Bird has mixed in all methods (and all other members of the trait) into its own definition as if class Bird would have defined method <em>sing(</em>) on its own – no boilerplate delegation code necessary.<br>Of course you now can ask every instance of a Bird to sing.</p><p>A last word on keyword ‘<em>extends</em>‘: you also (or normally) use it to let a class inherit from a superclass. In case of a trait you only use it if you don’t inherit from a superclass and then only for mixin in the first trait. All following traits (should you want to mix in more than one trait) are mixed in using keyword ‘<em>with</em>‘:</p><div id="highlighter_419989" class="syntaxhighlighter  "><div class="lines"><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="keyword">class</code> <code class="plain">Cicada </code><code class="keyword">extends</code> <code class="plain">Insect with Singer</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>4</code></td><td class="content"><code class="keyword">class</code> <code class="plain">Bird </code><code class="keyword">extends</code> <code class="plain">Singer with Flyer&nbsp;&nbsp; &nbsp;</code></td></tr></tbody></table></div></div></div><h3>Mixin’ traits ‘dynamically’</h3><p>In case of class <em>Person</em>, we face another special problem: We only want some instances of Person to be singers. We can’t implement interface <em>Singer</em> on class <em>Person </em>since this would turn every instance of Person into a singer.</p><p>Fortunately, Scala allows to mix in a trait ‘dynamically’ when creating a new instance of a class. In that case, only that special instance will be a singer and provide the methods of that trait:</p><div id="highlighter_716064" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="plain">def tell { println( </code><code class="string">"here's a little story ..."</code> <code class="plain">) }</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>6</code></td><td class="content"><code class="plain">val singingPerson = </code><code class="keyword">new</code> <code class="plain">Person with Singer</code></td></tr></tbody></table></div></div></div><p>As you can see, we’ve created a new instance of type <em>Person</em>, saying that this instance is also a <em>Singer </em>by using keyword ‘<em>with</em>‘.<br>Actually, we’ll receive an instance of a new anonymous class that is a Person as well as a Singer.</p><div id="highlighter_859579" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>1</code></td><td class="content"><code class="plain">println( </code><code class="string">"class of singing person: "</code> <code class="plain">+ singingPerson.getClass )&nbsp; </code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="plain">println( </code><code class="string">"class of singing person is a Person? "</code> <code class="plain">+ singingPerson.isInstanceOf[Person] )&nbsp; </code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="plain">println( </code><code class="string">"class of singing person is a Singer? "</code> <code class="plain">+ singingPerson.isInstanceOf[Singer] )&nbsp; </code></td></tr></tbody></table></div></div></div><p>Unlike in Java you could call any method on that instance without any typecast (at least within the scope where you’ve created that singing Person), no matter if the method was originally defined within <em>Person </em>or <em>Singer</em>.<br>Of course you may encounter some problems when sending that ‘special’ singing instance to a method that expects a parameter of type <em>Person</em>. Within that methods scope, a Person (in general) isn’t a singer, therefore calling <em>sing()</em> would cause an error since method <em>sing()</em> is no regular member of class <em>Person</em>.</p><h3>Is it a Bird? Is it a Singer ? …</h3><p>In that case, Pattern Matching may come to the rescue. Since you could also try to match against an arbitrary type, we could also try to match a <em>Person </em>against trait <em>Singer</em>. Let’s say we want to cast some Persons for a Show. If that Person is a singer, she should sing, otherwise tell a story …</p><div id="highlighter_971621" class="syntaxhighlighter  "><div class="lines"><div class="line alt2"><table><tbody><tr><td class="number"><code>4</code></td><td class="content"><code class="keyword">case</code> <code class="plain">s: Singer =&gt; s.sing</code></td></tr></tbody></table></div></div></div><h3>Conclusion</h3><p>Scala’s traits are an elegant way to separate concerns. Every feature may be separated within an own trait and can than be mixed into every type or instance that should posses that trait. This first introduction only gave some superficial examples, motivating why and how to use traits as Mixins.<br>The next ones will deal with some more interesting questions like how to claim that a trait may only be mixed into types (or in conjunction with some other traits) that offer some needed characteristics or how to leverage Mixins in order to inject some Dependencies into the class the trait is gonna be mixed in.
</p><!--adcode--><!--/adcode--></div></div></div><div id="readFooter"><div id="rdb-footer-print">Excerpted from <cite>Scala in practice: Traits as Mixins – Motivation « brain driven development</cite><br>http://gleichmann.wordpress.com/2009/07/19/scala-in-practice-traits-as-mixins-motivation/</div><div id="rdb-footer-wrapper"><div id="rdb-footer-left"><a href="http://lab.arc90.com/experiments/readability" id="readability-logo">Readability —&nbsp;</a><a href="http://www.arc90.com/" id="arc90-logo"> An Arc90 Laboratory Experiment&nbsp;</a> <span id="readability-url"> http://lab.arc90.com/experiments/readability</span></div><div id="rdb-footer-right"><a href="http://www.twitter.com/arc90" class="footer-twitterLink">Follow us on Twitter »</a><span class="version">Readability version 1.7.1</span></div></div></div></div></div></body></html>