<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0069)http://gleichmann.wordpress.com/2010/11/15/functional-scala-closures/ -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Functional Scala: Closures « brain driven development</title>
<link rel="pingback" href="http://gleichmann.wordpress.com/xmlrpc.php">
<style type="text/css" media="screen"></style>
<link rel="alternate" type="application/rss+xml" title="brain driven development » Feed" href="http://gleichmann.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Comments Feed" href="http://gleichmann.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="brain driven development » Functional Scala: Closures Comments Feed" href="http://gleichmann.wordpress.com/2010/11/15/functional-scala-closures/feed/">

<link rel="stylesheet" href="./Functional Scala_ Closures_files/global.css" type="text/css">
<link rel="stylesheet" id="sharedaddy-css" href="./Functional Scala_ Closures_files/sharing.css" type="text/css" media="all">



<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gleichmann.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gleichmann.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="brain driven development" href="http://gleichmann.wordpress.com/">
<link rel="prev" title="Functional Scala: Functions as Objects as Functions" href="http://gleichmann.wordpress.com/2010/11/08/functional-scala-functions-as-objects-as-functions/">
<link rel="next" title="Functional Scala: Comprehending Comprehensions" href="http://gleichmann.wordpress.com/2010/11/21/functional-scala-comprehending-comprehensions/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="./Functional Scala_ Closures_files/Functional Scala_ Closures.htm">
<link rel="shortlink" href="http://wp.me/p95ru-5z">
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1268754871g">
	<style type="text/css"></style>
	<link rel="openid.server" href="http://gleichmann.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://gleichmann.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://gleichmann.wordpress.com/osd.xml" title="brain driven development">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
<style type="text/css"></style>
<meta name="application-name" content="brain driven development"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="a development driven blog"><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gleichmann.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico">


<link rel="stylesheet" type="text/css" href="./Functional Scala_ Closures_files/shThemeDefault.css"><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Functional Scala_ Closures_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Functional Scala_ Closures_files/services.css"><script type="text/javascript" src="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.js"></script><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability.css" type="text/css" media="screen"><link rel="stylesheet" href="chrome-extension://jggheggpdocamneaacmfoipeehedigia/readability/readability-print.css" media="print" type="text/css"></head>

<body class="style-newspaper" id="readabilityBody"><div id="readOverlay" class="style-newspaper"><div id="readTools"><a href="http://gleichmann.wordpress.com/2010/11/15/functional-scala-closures/#" onclick="return window.location.reload()" title="Reload original page" id="reload-page">Reload Original Page</a><a href="http://gleichmann.wordpress.com/2010/11/15/functional-scala-closures/#" onclick="javascript:window.print();" title="Print page" id="print-page">Print Page</a><a href="http://gleichmann.wordpress.com/2010/11/15/functional-scala-closures/#" onclick="readability.emailBox(); return false;" title="Email page" id="email-page">Email Page</a></div><div id="readInner" class="margin-x-narrow size-x-small"><h1>Closures « brain driven development</h1><div id="readability-content"><div id="readability-page-1" class="page"><div class=""><p>Welcome to the fourth episode of Functional Scala!</p><p>This time we’ll take a closer look at those all-around highly discussed Closures and try to clear some misunderstandings about it, since there are so many discussions out there, confusing simple Functions with Closures. In the first place, Closures are simply Functions featuring some special characteristics (which we’ll gonna talking about) turning them into, well … Closures.<span id="more-345"></span></p><p>As we’ve all gathered some profound knowledge about the definition and some of the characteristics of common Functions within the <a href="http://gleichmann.wordpress.com/2010/10/28/functional-scala-introduction/" target="_blank">first</a> <a href="http://gleichmann.wordpress.com/2010/10/31/functional-scala-functions/" target="_blank">three</a> <a href="http://gleichmann.wordpress.com/2010/11/08/functional-scala-functions-as-objects-as-functions/" target="_blank">episodes</a>, let’s not waste any more time and take a look at another example of a Function, which is intended to filter a list of given integer values by the first element within that list: all values less than the first element should be included within the result. Admitted, this Function isn’t that meaningful (and only works properly for non-empty lists), but it will serve as a good entrance into the world of Closures:</p><div id="highlighter_993872" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>01</code></td><td class="content"><code class="keyword">val</code> <code class="plain">belowFirst&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( xs </code><code class="keyword">:</code> <code class="plain">List[Int] )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">val</code> <code class="plain">isBelow&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( y </code><code class="keyword">:</code> <code class="plain">Int )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt; &nbsp; y &lt; first</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>07</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(&nbsp; x &lt;- xs;&nbsp; </code><code class="keyword">if</code><code class="plain">(&nbsp; isBelow( x )&nbsp; )&nbsp; </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="plain">belowFirst( List( </code><code class="value">5</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">11</code><code class="plain">, </code><code class="value">3</code> <code class="plain">) )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></td></tr></tbody></table></div></div></div><p>Wow, hold on, chap! What’s going on here? In fact, there are some new features within that example, so let’s try to understand the Functions inner machinery line by line:</p><p>Nothing new should turn up at line 3: it’s simply an expression where we refer to the first element of the given list by introducing an appropriate <em>val</em>ue declaration <em>first</em>. The type of that value must be an <em>Int</em>, since its an element out of a List of integer values (we leave that thrilling job to the compilers type inference capabilities). We’re now able to refer to the first element by using that alias name as the story continues …</p><p>Ok, one value declaration under the belt, another one at line 5. And now take a closer look. Can you spot the type of that value? Yep, it’s simply another (local) Function. We shouldn’t have any problems with that, since we already know, that a Function is an ordinary (first class) value and therefore nothing more, but also nothing less than any other values (like our value <em>first </em>of type <em>Int</em>). If you’re familiar with <a href="http://www.haskell.org/" target="_blank">Haskell</a>, you may think of that nested Function as defined within a where clause.&nbsp; Well, it turns out, that this local Function qualifies as our Closure, we’ll take a closer look in a moment.</p><p>In order to bring our inspection to an proper end, let’s take a look at line 7. What we have here is a so called <a href="http://en.wikipedia.org/wiki/List_comprehension" target="_blank">list comprehension</a> (we’re going to focus within another episode). For now, think of it as visiting every element within the ingoing list <em>xs</em> and decide which one may go into an outgoing list (as the resulting value of the whole comprehension expression), if it gets past that <em>if-guard</em>. Since that list comprehension represents the last expression within our function, it represents also the result of the Function.</p><h2>Open Terms</h2><p>You may became somewhat suspicious while you inspected that nested local Function. Let’s take it out of its context and take a closer look in isolation:</p><div id="highlighter_620708" class="syntaxhighlighter  "><div class="lines"><div class="line alt2"><table><tbody><tr><td class="number"><code>2</code></td><td class="content"><code class="keyword">val</code> <code class="plain">isBelow&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( y </code><code class="keyword">:</code> <code class="plain">Int )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt; &nbsp; y &lt; first</code></td></tr></tbody></table></div></div></div><p>Didn’t we say, that a Function calculates its result solely in terms of its arguments? If so, what’s about that variable <em>first</em> (you know, not that kind of mutable variable as we think of it in an imperative language)? The only declared argument is <em>y</em>, so the use of<em> y</em> inside the Functions body is bound to that argument. And while there isn’t any other one, the use of <em>first </em>within the Function body is clearly not bound to an argument! Well, whenever you detect such a variable that isn’t declared as one of the Functions arguments nor introduced locally – congrats,&nbsp; you’ve found what it’s said to be a <a href="http://en.wikipedia.org/wiki/Free_variables_and_bound_variables" target="_blank"><em>free variable</em></a>.</p><p>And the story goes on: A Function containing at least one free variable is called an <em>Open Term</em>. In order to get to a fully functional Function, all free variables have to be bound (turning that open term into a closed term). For this to be done, the compiler reaches out to the so called lexical environment, in which that Function was defined and tries to find a binding. This process is called <em>closing over</em> which results in a closed expression or – for short – a Closure.</p><p>In the above example, the scope in which the local Function was defined is the <em>nearest local</em> part of the lexical environment. It’s the body of the surrounding Function. And within that scope, the free variable can be successfully bound to our value declaration of <em>first</em>, refering to the first element within the given list. But what if the free variable couldn’t have been bound to a value within the body of the surrounding Function? Well, than the <em>Binding process</em> wouldn’t have been completed. In this case, the compiler needs to expand the search for an appropriate Binding. But where to look for next?&nbsp; The arguments of the surrounding Function belong to the lexical environment, too. So a free variable within a closure could also be bound to an argument (which gives rise to some powerful abstractions, as we will see in some future posts. I have to mention the power of Closures especially in conjunction with higher order Functions here, since i’ve always mentioned higher order Functions so far). If there’s still no successful Binding available, the compiler <em>closes over</em> to the scope, in which the surrounding function was defined itself. So the following scenario would be completely legal:</p><div id="highlighter_62264" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>03</code></td><td class="content"><code class="keyword">val</code> <code class="plain">below &nbsp;</code><code class="keyword">=</code> &nbsp;<code class="plain">( barrier </code><code class="keyword">:</code><code class="plain">Int, xs </code><code class="keyword">:</code><code class="plain">List[Int] ) &nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp; {</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>05</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">val</code> <code class="plain">isBelow&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( y </code><code class="keyword">:</code> <code class="plain">Int )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt; &nbsp; y&nbsp; &lt;&nbsp; barrier + offset</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>07</code></td><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code><code class="plain">(&nbsp; x &lt;- xs;&nbsp; </code><code class="keyword">if</code><code class="plain">(&nbsp; isBelow( x )&nbsp; )&nbsp; </code><code class="keyword">yield</code> <code class="plain">x</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>11</code></td><td class="content"><code class="plain">below( </code><code class="value">5</code><code class="plain">, List( </code><code class="value">5</code><code class="plain">, </code><code class="value">1</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">4</code><code class="plain">, </code><code class="value">9</code><code class="plain">, </code><code class="value">11</code><code class="plain">, </code><code class="value">3</code> <code class="plain">) )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></td></tr></tbody></table></div></div></div><p>Ok, here we have two free variables <em>barrier </em>and <em>offset</em> within Function <em>isBelow</em>. And while <em>barrier </em>is bound to the first argument of the surrounding Function, the compiler has to close over to the outer scope in order to find a valid Binding for <em>offset</em>. All in all, not to scary any more – just a simple ordinary Closure!</p><h2>Binding – <em>val</em>ues vs. <em>var</em>iables</h2><p>All is fine in functional world if a free variable binds to an immutable value. Since that value can’t change between multiple calls of the Closure, the Function can’t result into different values (given the same arguments), at least for the part which depends on the bound variable. And of course the other way round also holds: the Closure itself can’t change the bound variable and therefore can’t produce any side effect. So all in all, even a Closure is a pure Function if all of the values it <em>operates</em> on are immutable (or if there’s generally no idea of value assignment within the language).</p><p>But what about Scala? Since Scala offers mutable variables and therefore also value (re-)assignment of such variables, it depends on whether Scala provides a kind of <em>static</em> Binding, where free variables bind directly to an (immutable) value or rather a kind of <em>dynamic </em>Typing, where free variables bind to relative locations in memory that can store values (and the values in the bound location might change). Well, we can bring Scalas behaviour to light by starting a simple experiment:</p><div id="highlighter_858533" class="syntaxhighlighter  "><div class="lines"><div class="line alt1"><table><tbody><tr><td class="number"><code>3</code></td><td class="content"><code class="keyword">val</code> <code class="plain">isAdult&nbsp; </code><code class="keyword">=</code>&nbsp; <code class="plain">( age </code><code class="keyword">:</code><code class="plain">Int )&nbsp; </code><code class="keyword">=</code><code class="plain">&gt;&nbsp;&nbsp; age &gt;</code><code class="keyword">=</code> <code class="plain">minAge</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>5</code></td><td class="content"><code class="keyword">val</code> <code class="plain">isGermanAdult </code><code class="keyword">=</code> <code class="plain">isAdult( </code><code class="value">20</code> <code class="plain">)&nbsp;&nbsp; </code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="number"><code>9</code></td><td class="content"><code class="keyword">val</code> <code class="plain">isUsAdult </code><code class="keyword">=</code> <code class="plain">isAdult( </code><code class="value">20</code> <code class="plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></td></tr></tbody></table></div></div></div><p>I think you’re already in the position to clearly see what’s going on! Function <em>isAdult </em>seems to be a Closure since it contains a free variable <em>minAge</em>. The free variable is bound to the variable within the surrounding environment. Note, that <em>minAge </em>is declared as a mutable <em>var</em>iable instead of an immutable <em>val</em>ue! And now take a closer look at line 7, where the value of that variable gets changed. It’s exactly between the two calls to our Closure <em>isAdult </em>which is applied to the same argumends twice.&nbsp; Rats! Our Function results into different values, based on the value change of the bound variable between the Function calls.</p><p>Now guess the kind of Binding. It must be dynamic, since a Closure behaves differently due to variable changes. The Binding doesn’t refer to the value, given at the time of Function definition but instead to the underlying location in memory. Again, Scala bite us due to the fact that it’s an hybrid object (imperative) functional language and therefore also allows for imperative constructs. Pertaining to the construction and usage of Closures, this means that we might walk into the trap again and produce some impure Functions.</p><h2>Quintessence</h2><p>So what’s the quintessence this time?<br>We saw that a Closure is some special kind of Function which refers to some free variables, bound to values within the surrounding lexical sope of the Function. ‘Well, then?’ you might wonder and ask: ‘Beside the fact that i now understand that most discussions essentially revolve around Functions in general, only partly about Closures’ what’s the big deal? I can’t give you a fully statisfying answer at this time. As you will see in some further episodes, Closures play a fundamental part in many different areas, ranging from simple state representation up to Monads (now you should wake up and pick notice, since Monads are so fancy these days and you might still impress your team members and friends).</p><p>And there’s another one, we discovered several times now: while Scala provides great freedom to go either an imperative or functional way, you might get into problems if you mix them up. As soon as you introduce state to your Functions or the environment in which your Functions are <em>living </em>in,&nbsp; as soon there’s a risk to end up with impure Functions. That’s what we should keep in mind: Of course, you might take advantage of all the options which may come with the blend of object oriented and functional concepts, but with greater freedom, there’s always also demand for greater discipline …
</p><!--adcode--><!--/adcode--></div></div></div><div id="readFooter"><div id="rdb-footer-print">Excerpted from <cite>Functional Scala: Closures « brain driven development</cite><br>http://gleichmann.wordpress.com/2010/11/15/functional-scala-closures/</div><div id="rdb-footer-wrapper"><div id="rdb-footer-left"><a href="http://lab.arc90.com/experiments/readability" id="readability-logo">Readability —&nbsp;</a><a href="http://www.arc90.com/" id="arc90-logo"> An Arc90 Laboratory Experiment&nbsp;</a> <span id="readability-url"> http://lab.arc90.com/experiments/readability</span></div><div id="rdb-footer-right"><a href="http://www.twitter.com/arc90" class="footer-twitterLink">Follow us on Twitter »</a><span class="version">Readability version 1.7.1</span></div></div></div></div></div></body></html>